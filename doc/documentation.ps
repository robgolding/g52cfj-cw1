%!PS-Adobe-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: documentation.dvi
%%CreationDate: Sat Apr 30 20:06:32 2011
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMR17 CMR12 CMBX12 CMR10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips documentation.dvi -o documentation.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2011.04.30:2006
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore}bind
def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave
pgfsoa .setopacityalpha stroke grestore}bind def}bind def /pgffoa 1
def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.665 1.665 3.00003 0.0 3.00003 curveto -1.665 3.00003
-3.00003 1.665 -3.00003 0.0 curveto -3.00003 -1.665 -1.665 -3.00003
0.0 -3.00003 curveto 1.665 -3.00003 3.00003 -1.665 3.00003 0.0 curveto
closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore
newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/UniqueID 5000769 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 38 /ampersand put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 85 /U put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AFFEF215D00BFCAD02E45496D7C8F5E99EB9096FC4300D038C1AFD31EC4C
5ACA6B72C1BE7204E37A4CBBCB1EC26AB87F2FF82DE20601025169A5FBD2D060
62B5B2DBC288C79C33B596832AA18D730AD572C6EDFABCBD36DEA87C0F323C3D
6E537AD3B43C6F3A905597570A8C6B0B4A5E08C08EAFF9731E745F2BA8ED0C0E
1ADF7821CFCD4E38F3F4C243CAD31D9F8FC68B9043740852B4CCBDD37BF728E5
648215961FA82A0C847ADCC5187331D0863A4573BE520C02CAE14AED4F06B3F1
FB4A318AB54CD86DEC824707B29F858FD726A167F2333855C0575EAF4EBEA0B6
754B1775F967140641FC06F82B191244186FF347A351FBD8FA62E8C978B21F6A
E124929876488AFA97FAD262BE3D172E2F03F564F1325C9F1E050C83C12E0CE3
C7F58270B5C40B46B3F592FB41FFB7F59EBD69B2F489441E398FEF7F84C85055
531D95FD21629B0E509C2FCEE995D025BAD5D3F28CDBA5CD414405ACBD936C3F
AA4CB2620D7426002161F983AE95E542EB8553AFF7E57B82E05FDD5FC433E1DB
BBCFFB1ED92299DB0291CAB10A84529B7FE279C62628A24A2FC36B01976E13A9
C528A198B8EC8654AD69CCB5C209964A2B25D6DA9BA0FFB366D19D8C69701D7E
8ECBEA88569601C80ACCC2D5487DDBDC27DC463A53A8E59F9EC17D0ECB7D2188
B6CEC6BBCEE631DBB9959A9855B997481B5D88B8BA29995053CF42C5518A3E8C
AD21553A0F6BC3483624B013D3537F7C85D7C558A9C772554CFC1C3FE7A70633
318A9B31C4D878C1869C689904D52738802ABCCC86D0206C218F5558133858D9
BD552DE9B8B0A6CC1016F40F4BD80EB0CDA7BF6BCEFBD85907DFF2849E4C9E66
5D72FDEA8F51F9D0A96A7A35D1AB1C4DAC8AA1D27D796F6A7ED10A2A99749773
4147DCBC2B3CB1FE7F56BE161BAB7F27ECDFDACF3B85FD7D2E10843403CAAC09
1F5DA9C57346EC93E82A8FC82C3C94B2385BE3F554245ABE3B7755924F7FDC67
912B5434C62390C53D488929A52E0CFE4555CF9EAB2287431D55268966C6560C
B7420B80878A5F70BC01D4564C7DCCE42F1DF6C29D46B8EE78B70F8136DD6901
3EC126166C548339DD94F553F0EDD4DAE7B811020DE533022D9879FA82A3AB41
FE465A7925771EDB561993CAF0A73C3D69A715CDBEAA64BFC1A776B745C78BA3
194B8407EF7470EFEE975D08772E0642907F716AC89A033B85A27D8AD5112C00
F6794D16E0003E4FEE6C024FC891F8A6583BFD5C45A4C3D3166C39DCB64386FE
67936F4A1A4FCC3CF84989672EF8A53EA4CB061233112EC9ACA15A13D3052DB2
2516CC8D38A87028231DF8203E097CAB8FE08CEB50450A26C6FB9863735AFF5F
A66D6D112D1495B24480486D02DBA88FC1BCC3EFCD9B4C3381A89A76D18CAEE2
DB48BCF856CA9F9696462528206FD3784838B73D2C7B0993B02D4A312D552CBF
C2DFB707BE58EFD8F93BEC58C8C0A7B8CBB4630DD7D916874D0C00079815339C
3970B0326CEC4C1ABF5E094563206453331A9CB3328D470B6B58F54B6D158CD0
883C6C183F58325C9D21C13CDC1C51CEA2C29AFF56661E5ACB5D74A9895A3AC8
8872CBC7D251FE695FCCC5BEC4752790A1DCE9204EDA570528DA3F5EF22222F6
7C1BDAC0AF8E8B70BB2B6436BB0621111B91C8A5871D37CC5C639D95CEF64794
F79A77A677900CE8EF887986CC35E02F16EEC8A02E91458C7C7C6C8F905185DE
6F3E919C59D9C121F5B212999D21D23C8428B58E4BE68D1D07C339AA465EDDA4
DC0BC07B0A89DCC7275A5EA502571FE03D435D01FFF15E90F602514E3EA780EE
8E0BBF756280B949378C88E12E66525576FD7EE06658CBAE27EC1E9804EB1AEE
52E8611FBC65DA3F7E1A98ED6C3F8DE8896AFFFDF81912190209FAF7E6106544
EA6988010ED501842A2970EE045A66DDC434A0ED64436610397652C723DF3AA0
C6894054322F7FAB178218D0208E542839A60AB5B4758AF32EE841F376ABDF66
25A0209DE2BFBE2D12BED388378B8652BEC4E0A3BE1AEBDC472BB673BF02CE18
958AF17405F180F548515DDCD42EFEEB81AB80E40A89DAF9114C5CB863413A21
4078325564762786F28E10C3725543CFC411D75605C9E5F2595220BD8A1FAC68
FEB46FEE7A2632319ECB2038036981A23C5679E8B74824BAFF631FD3DF67899B
3FCB8953A9030816CA576A96D40B461544B85F64FADC9764110520B3A4DD86B8
D41D5E13E376229F5B20BFAE8B0FE062E5F4579454044B3EA2A2D1FB5ACC7724
BA04D4982B4700001907AD6374EDC096B7990C60FE5BF372DDC13E948D433800
6E0AFB84D1AB82C13B4DA6860C47CD93992BABC5E876947C2FA67E721F6371B6
FBCE3DD40438EDE2002CE157DC59F77420979077F6AE066B2523270D020218B6
526509F71053D9D83A60CF90E6F7C71D6D6D43EE2963613151F9CE829A0A8F55
C8E6F8B7A9D1EF1D4C0C97BD0F49E0B80648A8B514713586695C0736DC1D6DC5
B2AE4CCE6AFB050D2FAA04FEFA9BF3FB40A9F551276163A62EAE434590235015
1D92664F3316AA44774EDD1DA50DF8E0FAFC99D60BA1566940CA646EBFCC32A1
7AB6325861EDBD2FB987B8A974CF00D5CBD3621666736F5BE8AD0BC4506C6229
F961A933BB5689B9BD131006064D9FECDC7FC59AEB505E8C96CE981EA2BC3D9C
9259E3F3152C6C8CB8F15F9144E36E8D8C31945F62310C5CE6528CA93B996FD6
AD0DD8D4B1DD0DF32CDF0DA5C601A119B88A56E36C0D2950603A5B7B7F7CF850
E7D75DB0B3155FDC9865ADBF7F3CFA5C45490454891602101782B79F3D21AB3F
6246841ABF49919B5438C4C009B78CEEA7C9F31F89710D1948E2EE2C77163BCD
7B80D1C5C5954D8ED429D99D7A3C1777341EBC5CE65B57AB904F02B9341F3673
49F5582A9A31707CD3B42718D595D0D4F920EAD2EC802FB5F78C5EDF7125C109
8B61EBDA9AFFDEAF061F2C22CC20CA5BDF2CC4DEF46F65AA83607BED452C7E02
725D97EFDF5DF2949B06F02809CF3488B4431AB69EA07713CD484A946CB8B110
4CA522D14F7E82AA644532E276E6BD6606723DF1D991FBAD81E6FBFEA0A186FC
7393568CA2CA432F8E5B3113F8B882528B220C4B75B91DFD0F27D4FDF5929826
97F929051E0521A90D3B106AED1D7AE2730C62112C828DEA6ADB330240E19DFE
3CF50198746BF9BEE70A594EF8CCED10CFC3451633575969E19DA8E0CFE2B5B3
A5052097A796760C269B3EAA525BF8EB0A1499FFCEA849C6951A08CF58729927
4CAFD007DDA00999FBE8B7EF61C88654DEB7089BD3C21FD454E77CE08D43C654
7BC3645716FC08CAA304E3CE9B75D0B27F47A2203CEAA64CFFD0DF8BCE40A5DD
5325D94208E7CFD62AEC6FFDDD40F6A5ED2A2451E0EE25AAD35830E0623F3591
9E7232FCB6E106D79C724AFE4A46FBB1FF01C814360B6ECDAB64C721F813EB84
FB9E90ABC31FA59F5A65CAFF2113B1CBFE2EE83A84EFF8CA1F8387254DD93831
8F0DA7A95B2AECBBB156B0CD7C40FA89A13393FBED49BCE62EC20907D279FD35
A557B9B43BAAFB82F97209A06C9A4068C126CFF1277D6D940000AA31A190CF10
7B86A0E8ED0AC9BFFD3D429ACB2F4E7AAACBEAC09BB2824EC4FEB7681EF578E7
95D1955F4C0FC33B3F9D7584D5F5E6FFDD6169645C59195935D0D31BBB0B3BD9
86F80931DEED4B5C2FAAEA4F9E47DD4693321DE60BCECD63BC70F90EC1B3A8DE
0C53763E9F3B1193FDFA92B31E338843568F7D622F2727A8B771D109014F9C79
7DC6CB6E54E81B7199DC96C8E04433DB4AFE8CF0384446D37AC7F20EC922C767
82CBCA75EA8A7924C4D69E366659AA9AE0AE468FB55F2D58940C876C768747E3
013530B8B83F8E037B78854582FAA6EB55D46057C73CB15B3774090107A1431B
E5DA5D9D1B1F178E0D0CFCE3CC9D074234449B190E659F67ACE729632A192053
F4FEC4B863B037432E171BFAB2F58FCFA3D97DAA31A9FC5D812792EEA7EF2F62
61B86A422772C644BC0021B8919F474715FFFB9097C07890E2C84646CCAAACA9
A26DEC2D20E2180521CCFEA60BBC123EA0EFB8D94AFA43F6A73141861E0BEFF1
A970825763EB03167B4092800C57FDD11309845E963B4B8B82CD192D5406E4F8
B3898C1EBC528DFBA46C49475C6B6B1FCD6F2F0B1C850F5BE3DC01C053AA7BCB
CCA447F5B295221EEAC306DB1C26956F2F22681BB231817222C785FBBA095857
AE1B23693BB25A3E4C3F20847A582E17CA3166DAE73F88F83EFCC871194CC48A
EF36863F7C578549BA5E72C0C5AA001BAA7BAED8B603DF042520018BAF1CEAE3
7CCDD98634DE7E2FA3F40B01C40483587EEBE8F37D49963864FDF3395BA59DE9
62E72383233F8C47495BF529F2322CF79D416B32570E543CF5FFA324410CF6A8
954D00E66EE724CEA578DDB41CEC1863783FEA2124C58EC5662E7D2D45DF10D7
B96335D9587A1938755A422E02D0140FEFB45517EB67695F2FE2B751AB101DF4
61D7BB2287A541C993C4FBC15C5993AB1783A49452C31ACD4A5E798FF178E5F7
D45C8771F421C183C2A4135A050741DF56CEDD70265BC6816F700FC129A5CE17
5DD37213B00C55074147F3BC7133DC0B4694C1F1872873FEAAF44747FE46EB47
289D5FB1D2035328A0621C57BE3A149DE84A7EC23F7DE433633C27A2DC49CDDF
E9E64FE375563CB72B4D93B457D142909CFE3B73A48E2C28A7BEDF75E9A9854E
C48C49DFBCA3F98BFB244AE952227DED13E74EF4047F33281060C96F47F7E347
EAD6637B5DB3FB2BD41AC3EA50B80094939222D6427DF11B69F9301F70BD082B
B45B685FFE56D717790DD61483CBD3432163F10938235D0247C1D3C1E8D03623
0E8E3187794A9B2777E1D6013A21B826C0384CFDFADE0DF84391AF60B2DF6EE3
D263FFBFDBA5B6ED01CA6156516A3D2413AB15CE5FD133E23C57293EB07D361D
DC79052A042E53CB159A62AEEB9CA52949F112A8B9AB51C35CD7AB1977A157B0
74EDF2365DED53C65CCBED35DD3EDA26CC195769ED8CA390DA37EB3D93E3D337
D7845B03E5DCD0E8022F313F86BAB9B53A04E5D8BD5879423701FB0CC58108C9
5BB4304A63103F4C4D783C10202E8CC8772DF1915CA7C9DA4960CC8B923C4DB4
0E07FE35290A44DB3C33451528ED1B4E8BE3DC62F252C1261A204F8333763071
A1E9F38546DE2A1472374E5CCFFA0DA19C1B6A71E65C2F62DEA5A6989CCCE3FD
6D283A7FE3B58773CD73BE4CBED32024AEE6BC9AF4EA646B581782F9DCF8EB70
0781C5CFB93ABF31948985DA48FFE47F32F85C1C45EF47338CA66C48F0186C87
4AD7AD96D60D6155D03C0A63250AA1C86C6AB78A7B76F8B856C86BB47C121398
AED15D2D39C8CF22093EF599BC2ED00B8F9281EE08D5BE859470227138B5B799
B856C408D28D6E3DE2B1030A37462F0F5C911DCBFFFDD9736253BCC0BF0F5B5A
C7A1053AD560344C8EC5204D71962CFED30FCC7F95F25B4694724F7376C1DD3E
9DCE2AFB517E351D2717CEE926F9521781B57AA74C6A453F40069533346854DC
F948C67D54E9E92F2A3651E6EAFB79074E575A244D6315622493D471190C32BF
13AA0B8B1CF37AE32DE7C0F13A202D36C84214C3E00ADCFCFAE87542DA5F9F33
C1128B74B15AC20FA62160E74E0148173961BE3218D4A24CEC9E6E208975942C
09EBBCFCC4CF52150C2AAC3CF342542641C14586591022D01930845A33EB68B3
478AF29D3B2793BB4A876C0E2A1F57964C51F17A62A96EA8B662B70CBD40B863
34B20D5B373B991591353519F8A83457EA7F3BB39FB24F9C16AF2336AAD62120
EF52008688952E66A84F48DE43D453FC82A9E1A607B05CA29EDC83081085D932
651EACBCE88214A8B49C394AC088F6DCE77D89A9E2C31F0677311BB9EB268393
4387BF07B692910DC81DAB9E61FC5BBF23F08726B286E4273B57A117B2DD504F
94ABB6012633A3DEA0BECD939B3E258A0E6C22D11603279B72CDF6751E7718F6
4A0398472030A4E9CC2D3C39173A43AAAC3E78A0964A55E3B607E3B276C3F116
B17483CCC798C0DC18E565B1A77F21682969BEFA9101BFEDE650B56226236282
0E83F9C2AC728E34F165678E3F47451F1352E05C2016D4BA596145C92FAEAA16
7AD9985B5521C98C1162FF9C14BF520BC86BBF2D1A701BCFFF27AF1386C85902
72F566EC67B67266F88F5C6A1AEEF51167B4D70EBF8A062DFD33A7EC51B01857
63EC71BA6A91831CEB3C216348068B310DCB45A4B3E286E2A23A58C8E8DCA9B9
C23EF30EBCD9ED64288A0D5CA46CEE2F2850D68CBCD0CDED932D3CD92D026EB9
0388E9494BEC80A497914B3505CFD0306155738CCED0F24849775292D80AEAC2
CF58ECBBC5B8EA3C6D7114680B47BBFC2F281E770D222CC7DE030B9E25F52B09
12CF9B0C9BCAED8E2D6E31303118CA10463ED07164A433102381C191A7EA04B4
82DBB61FCF3574F270A8E654DD9E6B0E2BA435AD94548C3F68909C27C13C532C
F5D7C435023B08D6ED6C01B4036AD7223DF700F25F156A6D6F76C9F7A6584E47
2DEE2E8E5265ABFFFFD0FD050E566BF05FD69A0225906127EBBE72BEAE54C63B
D69187A1AF618BBB5A70D6562D1A95674D1A56AE774D6663075589CA9F063079
B35E9FBF0C83DD376F2994AEFA7727FBA9EF275FD1907A2306BCD0CBD947A24C
BDE80DBAF1178DBDA9A77FD3C3949D1406D3951BECA6BE1508076BC8A728CF75
37F59CDC03A50C8721C08E801F83362AF6A10989C9B4B1D4E89A9E7B0CD56FD3
43B05E98135AA59D98660AE984830B858A1A532D7DEDB22F220D3A4158E61938
8784635ADE4FD05BEAE50F946808AB2D30A94593D52152845F92C5A1622B22F4
705E2B2A05D1B55F5414D35EAC9BECE4E6E9E9B71BAE360DBFB8FF96D0744D92
F3294DE5DF615DE028F0F53BEC9B44E6333208BEB0B9751F987B3BA3275D55A7
06F32893A4E0AD992958EBA21F8A665BD3FF21774822B8FC2BA975C2FB0A24A3
195A9A9CFBEAAC601BED731DD4CCAD162834FD573652C968D76553D8EBD5EB9D
273FAD36A7AB429360A42CCA268D4C4F2F764B372FE4E4406A94C6EAD54AFD8B
FD78C730A0415B4394720850263966FA4B3E8F6062468672CC2F9ABB88394B4F
FE7CDF9239FC5E60AFC0294105F7D19A9B4DDFB2127B8E377DDB6A4594A5D338
BE96402F5E41A23FAB457E0240A152D5465E0E1EA380138B4B3F8661F49A614F
99D528740726D854ACA75FE39BE371A067958D1B5BB3ABDDB13DE56EC8A4A38A
899A39E0C4595D1C93773B62130762FD0CE411F485032279A8BFB5EFE781AA48
CE4F4AD9B6FC551B02A43035544F27BF307CBFBE57B095F6B8E6DFA492A5588F
454C6BDA2AEC35B233D8C8A085E2220F4B5464798C7756090921EFF0675BE5A8
1F702B19D48B08D02948DE930D66CE058C100025CBB671D76B0E9B9131B3887E
08BE7CABF135D1AB547EBB8534BE5C0AD014E72156DDE4FA35E6274EB88AE40D
20DFE16912EE7721A71C520AB256062E921469BE66359DB3718C80D63E2E03D0
03C8872483DF32670CCA7CEFD99F8C77A31A336E23FE4ED1BA5BDFB5B9B34FF0
9A97BEA7EC80B54636550CF2C556DCB1A657672DD418B526F3DE0224B39256D9
2A8927BD451FAEB07ABB2507EFA37AF950293DA2C5F651F79613E63E5DADC8A1
095A9F3F766BC1852491B38DE1E26793CEA46EF483D104CB0F33F15CE31B0332
C9A40521E9645B345F8312C12AE530BD5770B96367D0F9C40BD5D0A740CC0A61
B9B31E1210A5F73ABA4C40631CF1B4FE3AD927A8C8A907792811DB6B4DB53D51
B16AB2C643284EA41467C1932EF5FB7E1427816831B6F23F9EB30854FECC1F42
0902E5E309B3F8C7F05526280D7E58824EF0678F1A973B39FE774E9941C942A3
DE42EFF255319CCEEEDD473C2DBD9FB85875D05A826358DEC884067FA0655458
D77C9DAF122B976627F6E2AC5CA75C84E19D4C330480F25812D3B1F5AA1D3FC8
702264E3CE80D2F082FFDA420819A929C8A78C2E018421FDD4F0BAD45F17FB31
B4C9BB1DDFFBB63575715F5E17440236AD7A0636D53F0E7CF2BF3061DF1618CC
72F44474CB357380CE726E2E574E6F3983139F73FCF6654AECC4BE0F916AB08A
D2B9C7949A2216275EAC99F50962EB96359A4D9D29344404BFB0BFBE03829A4E
7F985590A55913EA6F6E9ECAB39495C67134F4B8ADB7D729BD7B3AE5C9D6585D
F5D8E8A5217EB7F735724BD1C3136F5AEB207AF9BDE734D542E9AA5D0974BA63
9D3EB48C1FFC8A8565B95208D963BD01FF11BFB205B9A42E60F18C7C338C7F8A
1A2584C8D49163654A422F82CEFC3688158D99B8B25EF61086CE4082BBCAACCA
9A7DFD2D077828847970A93231B74294A7D6572D626280349E1738D346E03C14
FECB5270FC5264DF77A9B98AB4DDE7B8505F9C506AEA1529D6A3E35BD26C71CF
DC70A08BCE52357948DABA8CA5D4506EC532263577531E2F8ABC69CBFADDC4BB
1B15EB2AA4CA37C7877978AF9C6A441095C98ADA78A6E115C791C129FEED46A0
4BF351C25FE2426219597F2E1FC8400EC62414D235ABE29DC46BC276880B9E7A
D25CA2BF82A92465F332301DCEEA8A34C1B48ED1AA3DB2E734142493AB654B0E
AE66AD35DCFEED5006DB5A2F1A4CD7B8069E6A138A70E994014522EF580FF4CA
CF1B04E5689521AF6C43440E813274AF4DF958BCD3D9A80035941B6F25089ACB
08A44D98B749039D6BED1B0530D1BA21DD73CE3A42CC280FFEA41915B6A6BD3E
CCA3B6D15D0AA08DA64A070B16D6850A9322263DC2710360FA99C5F4BC833D88
1A963259FBC28770CF03BEF457055F3090810824C157AAE732A06959DC091A16
CC5F33C2DF257134C43E69F38C2C306CF02A7A21A492A3CF43E41665E3FF0DFD
86E0BCC003EB02A6E8A39D2F2FFF6D284D596EFDE28C0FB066C06F6A3707248F
DA47E913A8E81C2F3FA753541B8FA7C27C0A03A02EE3591A616E5029AB50BC07
F5441C76BF7A6A5A042971F33E57EADC878B9498B4D482ABB8292FAAFA6B9511
EA3CD99C1F23A7D3406FB6F3BC53DF6EC3AFBBA873A411BCBE921B6481C739A9
AD968772A56A9200D133565CE374C49622AB2E31BCC68E8991FFED736A50D0A4
39B3E215CAB604C279F2CB52171158A4DD5D1D7263A0C0B89D9E4730E8C85A22
4070E11A01293D73A151175F3BF3786BF59D0BD5D442B92607BD90B4065BFDCA
0E239579FE914BB49CA567F5542C962A901F2CB2AB62673A9EDB66D3D02A72E1
1F3BDC047FCF1A284FC86A23AC4182A59527925825743D8CF5A751C21F31AB8E
5323F7A689E7D613431CF976772998042E979C31FA625B9B2F4C679D4E03A341
0F0473D5983C86710023203852C95ADC67FDD91FAAD756AA774550046D1A919F
760FD4457DD3E8083C815DBFF809C212B23A42A6329092E0C4AE14594D399310
DF981E3F7C202D618ECB08599926102A0E4D523690541E53AF180B7DB4A2F1E0
864BBA3295E20C59249AF8C6BC2333B6B249C84AD397C82844A441186155FEF4
579B6321E3DD721E0041BB3DDC312FF3B676E14AD7F82F39DC78766A06A84B94
DA6F9D1C3B957CFD2C12F43983C315C0218B9B2FCC0558659E9A32C93168931A
F9F7B71C6B7065C14489DE99350A017393DA8DE7399785537E04FBF454E8E7E2
91BBBB8652876FD81300B699F6ED716DC8F8B8AB31C852F58095DCDFD1923196
BE73EB3344D695893B20574179EA8695001CB764B752638878B3E14883DC9267
4714726795D8B1D0BE6F9ADFB34B54AADD772A463C2EAB7C14125308D523A7A0
34072FC9C8884DA1BAF18D98AE86BA9BAAE6FB2A5AAF772CA5CCBA56F4054B12
57442BEE94636834D10E81244CCD0AC91A54CD9DE316AAFA242BBF912567FD89
8EBA65BFC9DF6E788CD3BEF8A08CE7AF2CAF3A5E170C6B60D4D3ABA220CBCE05
21143F05846FD3057D36F6E0245BADED2E90B6CDD0C1BDDDE1C88F9234EBD466
3D6D2A977A5A2882DDCC97A079A540658386403BBE055BAED0E397DF6D6D4123
3EFFEEEEC78308C69C46DADA1E009A3DB80AB55689EBCAD1D866874FC48336F7
0ABF6CDA0096A145CE73B77EF035A153A95EF35B3BDA8EC6017315223FC0D89C
4371C8800C9DD1871203E5F2173B327615338112C1FDE70277D099ADCA14E388
A7FBE9450B622600E2BD391351189CF52B584F6228F68FC6AF0FC56CD60A6657
58B8F2A8F503652D7F8A6873FC3EFE8476201FBE1A1EE927C9A1EA14EA51A536
E2096370EB79A0D62AC1D6237FC810AA47BC41C1C84A7C5C1503FF8B14DE34D0
970E5666B78215A5196E8499FC371D9D5D3F6016EAFB8346EFB2283895111755
B432C1DC8D5206808070DFBEB9669978533506CC8ADD951DCB74E676020032C8
9ACA0E15DB2D04C8CCBE2B68CAA1C1BBF6CEDBA05A178393203EB6F61DF6C800
934DC29D78A35CA25632C4EC485DDC3524E9E4C8D40E83D952F717FF07C0AB7E
32FBB18ED6AAF4A2904AAE74229A37C2C86FFE55483311A988AD7636F5E6D033
298098B605BEDAF7FCD569E7F1A837E292B50A42E37712031A92C973462254BC
1B15BF34FF171F12562AA40FB318F9A8E596405D961C97F5131029998958F16F
85B75089250A585404BAF0E263BBF92E72BBD0515A0BA78C9288F7AE1C71FC0D
40C2F6C46A2D6620E5A1373BC6DDF438FBA0489E72F447829FDDBE94B2EF7C8F
7F97E0B1DE5C597EB43A87BD1A9A9674DDB4116D594EFF5CF9FAFBB21C6CF3F4
D9CA0C026420D72D4F6ED70525D695D343994D15223EDB554C011B89E0856CCC
DD2B109F26F78F87C2571A7165CEF391E1304D60E55FF759826D4801B75830F2
40352A877F875BE5B03C7180193ECDE77583D23AC23A45765478428BB5A06334
6A2C772E8699130CBABA71222CB549C2E86DEA2DCAC48E5300D6AA7589977F75
A41A897394244988DCF3EBD37853985CB7DDAD79965AD39F1268EB7A6AB4C722
3AE1E239975D45B023979FB91D62A09487C6171C30AB12C2A5713C65620D09F8
EF5BDF8B5CD0AA0048985E95048F37415FE402A2045290D38B9FCD8B8E192254
DD14ED05F889CF0A981064D1A9D3968C20B4717A6903B08F4002FC238EF46017
573258BF2D0CD32E3E19582E4B6CA3D138A11A04FA8A6976752780EDDDE6A097
65BA33C2E3FDCAB8CAC23EFF037577BAF59EB1058338DB6EE462278131133E07
1D35AA34925BC740623098402C6F887111BA687610279F909746209664EC8CFB
6DBFAA13D89DF7EB9CD9D81C9C8CD84C4F2304EB0633CB9D6A9B06464A6B6EFD
51BD5B32FB0B434887412382616F2BC77F32F0F87E079C23037F1FE565490540
A85CFBC27F6326F8361B93BA30637D19C36ABCDE30EDC67A096E054C87B6C279
5380A9E25FE7DEEA8E05CCB38904F56D04F2997C7E6BA0A60D5A11E699727D1B
2967427F908AFE8C6711DCCFAD761B6A251D8106C4648591B8C4318B620C31A7
1C8E8E9CDBAB54C5458144BDAC6B4C5014C9F14ADC348B1150E3EBFB0E83FD4C
654122BFB297E61D542153CCFF83BA7950D3688694C35460F6B6A73BCDC43F85
117AFAD194A22DBC3AEB22CE9816E6D74D06BF2B48EA732C410AEC1BAE80C801
C5F7CD50EAD00CF4DAD6AD8FF2ABEB8CB13DD3138A1EA7E9ADE0909ADE91E153
34E1EA1FA25B1070E337B845CA89BBA8F0D3EC8ADD984BB255B1E68FB70099EF
956C6171AF1C43D7F095CE9A836EFFBC020E3C1F3BB72FB461B8D559C877C06B
F94759EA57CA40C70BE1E90FA08EAD7F37AB6B9ADA1B206583996609A0E7822D
353668BF318F20B6C24438470B2FC9B47C2407842DB9D5E0B8D359EF5FC960BD
52D98360DE60A6FC21797429F1DD219BC27F411D30EBE1BB4F8DEC8124948A9D
7D4035BD282BB9F406455DEA912B46CC4D61E83791DC18370D9642BC33FB0F55
8E0B2821C094702E90B7AE66128D1DFD69E02384D4F71B080472CEAD6DB5B2BE
221B774BAAED657A7B3960958DF398ED9EDAEA2173C69C56E128E2D410672020
0DEAFB3F67481F247DA8EDB0ACFE5DDD3E45A3EAB7963B9F49FBB1B6538C137E
F9F19B00D17ADA558E548BF6DBD120B97723233884EB2E74898F7D41809BA56B
0C1604A5D60399A74764BFDCF482FEE2A4D19414B7ACA96BFE862126ACB4D23D
9E3655D9F54FC4466FEDB31C52CD9BE821EBEABA63671B4A0A48599EBC020A5B
19B488F20E86D9EF9DB22C9B07B75BA4635D4382FF03BF27E896F920CDE5BF7B
F96023D35D0DC8168E9764AFD7126A274F037FFC700F5D45FE97BC788F62FC17
6F1743FD9E8F9B0B086AF6A2F4CD88887164086B0579C6F6E7964C7B87F1374D
5BCCF00081CEA5803A012952F6FD1829C37C3FA1670EAA65CDD3DC8FC39B6620
66EE97494337ED8BF486BB14BA2A8CABF3C2A82C810AA57B4D9565E31D9A1EDB
46F55D96CD43886AEF6C0EA51BEA29ABC8D89999111CD33564EE2E8993E10D94
C4A23DCF0D7EC593A3F51EA5402FD7CA627AE2F6CB6C8D15057C9E8F8DC22988
EB2CD6845B783651784280E84BD56F33AED484628B586192F0C72878E7612841
1F6F62DA88CA07143589A56292A740B6ECF47B56E9B6F74514614F4426D968EE
6E8553F03C26DA36AAE1A0E20C610D8D85C42B85F0DAE317F39E6CB777BE90F9
5559243ABAC3FC4CCD784A8CDB171FC1E33D763A16889CBA0A580084D1CDC22A
C695C093F24F1986876D29D3BEF7EBA62CB092DAF80BBE915942C1F4DE94CB85
B5E21867086F349BB3332C55C03949CAA44155BC6002B60EC5ECA354585D9679
1129BD8505AC16E98C9D59C97004C44F5329467481D6742520D3895928D2B58B
4C9299F6E4437CC977D188159B31D6C85BF1837E1635FB1912A3A0A7C477AF51
F5572C91C190CA70302E221C78D849FCBFAF8FD8742B45918E92CFC323D23F9C
EDD9868CA12564583553884F397B624BED92B84B280BC188F6743BBF4AF64F4D
308793FCB17CD879D10CC1537C2A0A92EC72D07508C53996CCD6DE7392E68EAE
E499D0423633BF0887B1F116B01979169659E87B9995632550114F0DE2680814
1AD2B3B228F2759185AD0FD1A2C1DC0484A3E199A6B133DE2E06B2E309D9ECC2
5C49F26101649782848CA59998EEB26CBD69005A8371DDECB87E0C0E494C226D
72233CB7F740E50A423BA06E905562FA2AC38C029E5EA5B923C1C4A047E08D16
217C35CBDB3F57C28DC9CC48CF1379A67792A398E1AE9A4A27B172F3954E7C6A
72FFA9AA19E923C0C626DD009266CBBD4BFC154BEF754AE6DC585189C3712921
6217521B89B790CCAFD2C0FDFCD31A7029A1E4B3251B95B25B0F76BE700BD287
C2B95B86A9DA81336229E8E17499606AD2909E4634B6F0B01F779548339D956D
C5ECD55D8960B41DB1BEA50C01159583
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 14 /ffi put
dup 34 /quotedblright put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 53 /five put
dup 65 /A put
dup 69 /E put
dup 79 /O put
dup 80 /P put
dup 84 /T put
dup 92 /quotedblleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 124 /emdash put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F43F9A1290E91C463895BD12E8A831DAD661EF23CB9AD2C26CFB26
71B72D15270CD8CB1D59CA2D9DEE4B63A8FD2929735CBAADF336DB2088C0BAD9
B79DA00F002B98E0B4790F729DB337A63C1BF138947E9552402C37257019A2AE
6961E7DE6E5472914BBA36D0E9F53FA5771D2801267609C8B8B12A11E0AB6031
E251D1F7D5055B426B1CEEB8B386F92A8661CE6E429DE0B3A612D6CDE03DDBE2
AE36B73CE97C83E306D223CE7774FA5AF973D985C5120978E1A02EC362C66754
4098AE47E5F9E0807326E42BF2869A9A97398E0C20F5F017CA9DB7BAB3BAB101
169D9B8A4E33ED8CE8EC3AD987CE15528ADEA1C2830CE749F731509FB6B90869
5967DE2A007A5F489E6735A959D465B74109BA1843085C27C269C751AB2FECDC
406C8C00B476F321DFBDC8D8B289265FD8D01FF1F9B77F9884F052D1DB422D24
5201FBD6463F31D0EE5A68F59D4494A93081D9ED308EE443A16710B76C554F62
59A79694ECBBA5B5F7952A3CC40AE422B2606781181EAD3F021010D5084041EE
B3FB09643D346C85D389DBCCBBE4CDB021849C266CB622F9F7DD740A0E8A1AAA
EF6F9D84C4DDF9DD97DA09905C0BEC0EBEFBAFB779344C1DEB9626E743D60D4F
71F6CEC22A583406AA0C6AFF44BB559EEFFC84E59DF38F5D6FF09211051034E7
681DA0AD991982906F5A888875657AE9843F0EE896ADE3990F916F3D9672CE2B
4E3FE944C8EF382711929FE7016A95D998767D156C56EC6623AF9AB4BB367E97
57AA8F3E7A2AAC32CF65FE36242D8C6778C40039EE78A3A7E2897A529F703398
333A695D5AB39E0361486AA65076EBF7BB068C9ACFE42A925AD428839BBCAB0B
B0A9A811A6D2D686A31029329ECAE472DB89FC9EEC1D6F34EE241674A3EE586A
9B8C87448819E4605FBDD7813B8B2D46A1B3CC07F4A4FB204D7735ADC8F6A197
2151706C4E12C6F43EB50C1E029D1358EC337D9FA77BE1B948A32B81BE78B087
58E2314470BD7E64EC788197F2C011BE5763AA6AFC837716574D27FCFA754F70
55631B667A6E45E7BEC208C3B4A68B34E3E1AE0FD4FFFE53F7656E408CDD8A3C
8215D594C6B911EBC9E9C15F2C96058D5FB62D083B34B01F8890C5E4C89828B8
88E40CA4B33A26CA98303D0E9981AF8EE6A5954205635379B9BB4962F2613D0D
D81CCEB228F0B38A08372BF2B9729D821A95E113828FC83BAAC642E71F44BCA9
20BCAD87F68AFC4596DA515B4EBE13E394455B81FE258589761269DE4E4E4F91
1E68000E98D0AF7EDBE4BFE6AA6E50E0A7FBE2D58164D82FF078B00F760D5A18
BB4FA9CDA30DB6F1AEF8AE8448BBC999CEE429C5E0366E567ABCA15654BF03B3
8F6419499B6DAF3F5133233547EEDE16EAAC1024DFA2E161FB6360112040DD3C
1FA731E3F8AE2E624ADD588699607939041D67135E11DE300672BE196943B7DF
A43C7D8C1090C551826A537FBE9B5F897B957CDB27ABA4802F0D0CDA54116267
2A62617B5C7D69D73B3D107D4E9FF0854D622C39534F12614E0DF155D72F1EB2
508279604CF865AE4CA32E601B41F9CBFD4336D16C2F7100365BA7FF124E3C90
EC49059AF265FCCC9ACB88D1A17CDCF09788C8877FF9D119C062EC9DB71DDBB4
0357D86F5DE3587BEBD9AD03DDF11A158B4370BD2D1AC26333AE820590CF22DA
6BD5621A494EA63AB3321C9FE29AC24795854136B0ED501CEA8E19CBBF7C91D7
4BFDC3188AF98414ADA57B34316D07DC570EDF6AB622BD817BE3931EC9198BC0
3CE04AFCF77206FD119D90AA7B757A37B5352F0C951AE88FBEF53E1AE76217EF
7700CFD8A93B2BB05DC383663237E82970FC0EC032AED2A2FD2D948114EEADF1
887FC308838D311CD7A6C7015AEE90D03B5B08F4297CE24D6C9564BB1E1E6246
C7F45B9E2769059ADB0351F9DA69C9E4A4CBF5A234FDF8ADEB552BF5791ACEAA
4888554A2B9C357CA3B78388D797B4A5ED18A7B9926A946B53768B5F92C8436E
4B52F69CAAA37CEDF28E1A7932370075637A5EA8335F072920AAEB5D5869CB42
F7971264162BCE85403EA8912C213D0F380112750E78D73EE20EBF970B32465F
631A609C2D47C4C813DC72D7DDD348577B381E953F1BEF143AEF54FE788E181E
25A760664CA624634B9D0CED63234B657F3686E07C885F34DF45DE13BEBF3CF6
0F47577DF1480382C1C3DA045E59B2E70F07F64FFC1484D6256CE1DC9AA6B1A7
9A830BF9538D50441B5B148E2D5A186A0B2D6A7B078F98E3570F14F38C8EA004
95714800B306BE0EC1EFCFD4FD2A2EE813B63DEDDF6F00CD335483969A18B7BD
FDDD3192FC329742C8432AAAB19E4989055DC58DD1D43E8C7B81DECAAA18C008
B701F44AA062AE61F376C4F8C13E33BB8D4514BD26F04533E9CC2B8DB99454AE
F0AD000339D7A794BAD3083F2D9AAD9D1602D2895ED92DD5A9A5121F9FD0A05E
1D205CC6917D4D2261EF3BD73D4B91A70044C4FB52C73AD5B6A6421C52E89B3C
88316D13BA566E9702ABC51525B7566F0EA0637809FB8B2F24322A43624A1055
281FFBA8503B42769A845613618365B53E1125D6B528BC0F95702F9F9CDEBA4F
9D04CF52CD03FEE2D759A5931C45EED755E89556D42F2CB0BFFA436CB8AB9EDA
1A7A2787F56AFBC998A8BF74A56DA8B116761754DEE5D29188F822EF313CC843
1931DEECF9B9BB8E4B55579F650836B2FAE102A8BEBC5D6335E36A67FD71C4DC
EDF3CFB6AA5BAFC7DCCAEAA40DC8E274CD2FC7005A3D8D5D6EE49C88A955AAC9
BDA6B7C55A63485C8F10193166F2C6B96F17F4BE8823C74F4DCFA46DD8D89C69
48EADC857A68A66F380B6AAD31487E7C45B3348282DEFEDAB18C6E3A6D1840C2
E0A360373E7BCA86D0E27AA4A520087094B6BC5E87B5969B8AF3AD360A8CC5D0
63F6A78D92267B48EAF24C677CC0E031A97AB0B96346BA356A35A3A118C170CA
7E61C2DB239B9BC7C9DD280AE72E33DBA4FE1EB55497E26DF2FC344B2A586CA8
9B01B50E1295C517FC56B367EBA9F65A5726E516E2BC0778AA2B6A909E0DDB5F
005860C6AE4B1CBE8C3C8C69F042F7A5179B54530D46D42862FBB603738B2786
6E5E0530417F1C2B9ED39473401BAA05CC80677CEE755D41C61927DA94075BDD
4315463D662B92846F40BF297926A3D86AB31E719FA985BF8FDC299361D62A2B
C2C0D49635256776D18855CC16896FA9E9C714592F1C79C33A80443945FBA4F2
B5820F17BC8ED7016FF57FFCAF31C661B026C2BC245E96EDE85181072464FFBD
09BFD5EF53FB8CC9D91F8D941645FCCB0E032FA0793789C36B95E5924AD9CC03
2C9242C08EE08CA81CD3D122FAB35DE13F11490627C39C2D01215C66346519AC
6A1AAA1543FED4D127248E3E9AB280F49EFE87CE1A94B6752A7C1839B5075C08
3BE84C8876CF06F87D903BE5C915F5A10C5007ADBE32EFC9160DF756A4496574
405310E067DDA1518C3CB86885834674A43E0D14F1CB9EF1056093B2B63088E9
F9B721677A8C942404CD8541CA185C21F5F4991CD2DB9CEA4707B58518BA7C33
2086DAEF23E8FA129BD1B2B426637CF042BCCD99E881B5899FC40D1378FA13C1
803FCC15CE58596999BADCA5FC2146237C1D110D4A10112D496250647F37A360
524B57B83CEFEE5A5C18087FDCC6851D82B8F47D6D27461ED6CB2F03A8CA5C71
789F0ABE005D1B8DE8BF9B6E198E85711C03E5B34FE2D8B1A5D79DB7ED0A1769
7E3B1BBD1F7F0D59BCF7DD90A28A47AD11CE149033CB4F6BCA830AFB9C241DAA
4FEF6BC7F7D7F83EED9F947931149B6CFA3CC383D9B53E7CE250174A661C774B
556C7F853DF36DA9D03BBD0BFB444CC1E1EF1C16C975EC6DD1D2A3932B45E92D
D0AEDA9A37141BA00C255F30BE997F6EB5B0BEB2DD02067F0C02C44EA6960180
B499CDC2517BF53E25AEECC8E54978EC276F3C7C3C20551876D06AAE5F690ABF
F45024064B1E772309E86A36D19D53D7AFE327530081C206E5B0002CD8758944
9EF35A4408044AED0223734E5A7F68B96A1184091D122ABB1E389EBC1F7EBA8F
BF04874D48127FFC1778AA2C732EB76F28344A7A9EC8F2CD10DB337DE214AC88
BF14CB44C2BE51940C10CBF3221A38FEF447DA4AA5530C69FB77B8666D7321CC
7E3D757EDEFCB188BFC4EDF0776C20370B9AE4BEAD8A6FE7DCC0F348AB05E7AA
7132571C27883C79BE00C2A2B098E24C14DB003C5D21197F7CA4F0CA289CFA04
2103D0600F74A7C6A4CDEB37360CE4F1D97E1729C795E32BC6586E753503D883
BF9B0AFB1D137F04DA7E7AB706640BE39FB72EB3FD5213E0B1BD3164E8FDF9AE
097A7CBA533DC0D676A5C7F13118D277EC40433640B24F4ABEB98273C68B8EB9
3529738ED8A711A8A0D7978A5C4047DDE69DB4F12E00E84E0939D06FDBF0670B
A0A5320A0D7DAA49EE7C7ED4269FB6A7DB08B3DE08BE6489170404C1F18A9E3A
763CE35DE900653B03F69A0788D1218E3C980BE20A6626FB5DCC483D57027F49
25B2DF05D44D9FB6E6421E51D03B25DA6FF078BB8C5EBAD81583ADE61D2492F5
9D22E775767C53C1075263C148105BC990B3795DB8324839667C74EB66600134
D8C8762F692A8686E28EA30CC072232E89D55A75BBA3B4B1BDDB3B44B52E2264
FD04EB8055DEF0FFD2CDF2222EDF546CB84B00FE5CC089B6AA82FF6961747486
FE05388E04FD5DB3815F144E1E56A2B5B6C7D10DEDAF99DFA96323E6205D227F
6F5C5EB3E61CA0296BD5A4B90D4EAB87E36367097D7BB720D1195A5824587B90
A5CF7C7597E5CA88374AB6F3156045D63BE9A490CB66F0F5EA7B0784971BD33B
3656A9C3D2D2B4ECF12C627E13B1118CC90A2359DA832D250A712E9E8296EE16
4369ACB22D6BC596B6D349D444FAE720332D14350A4C2D83E210E0DB8FAC6C2E
6977E780F7137841C519C03F898A06583FED74FA00B9739D79F2C0F772DC2BB0
A2C6BBD9783D22BE0C298DAE66937B5CF4D70E79C6302E28F23F329F6A42DCFC
56B95AB3931E78D85293BC14E52BE67B7DAA8A88EA97C3CFABF0498367F06E5C
4383632F2C99FD11CFCAE7033FB843909903CE82974C630801304E6D024909D6
3B465664DD50ABD7CB20BB79E8312DC95A61016BEAE60549D496C6ED75A5BADA
AA0ACB62FAB10807C6B3A8B2D8F388963EA4E312AD0D163F9172A62DFBED2325
C2F9E3928C18D459E2CA8E1AFC7294C01F77A325B028BA10324BA72B582032E4
F838C3E6A4EBC0130A12BE816C5CE5968A3372FEB802B8686D15E8F184506184
77E3A15441E280311FB6537C84BE4C6DE083EFF74609E84A8D33298F4E7A3559
A45E5DB3AEE2377673ED3E7C898CCD5861B5CB08FC0BBD66AD89A5E3EA67AA0D
13C80CE7CDAFB6381861F8FD4F539F81B352C8A2258FCDC5C8B05034BB3575F2
7A262F6B7EA1DC26A9A532FFB5CE40D385AA2793C4FBEBB436260EBC059824CF
1DE864040AB9DC46A3E01092F5B3447B51642ACCD23DB9A40F9CBD83774E7EBC
D4B1AD2F56A499569D3022FD5AD35EF26ED57FD6BC5A511090D81EFB435D4E6D
3C6B0EA851ADCE128ADA6934099346E53D9B12C785FBA912313E8F3172784C69
119A5E0A9460AAA6D2E3A4665B4CD36E8BBB35F7A9EBDF66C8641F47FD87BE60
E68E541F969497FA16B5821F94CF753197E41ABA98B9F6B884B02BBF5A4F4F74
5F2003B8B91BC40B64B3DB9A291F9C8C75482347303F4F1D16ED3405E23F34DB
7CEAE333DE9F69A5A0E87921BC2E3A8FD5AF33D0E8768A79F9015D26518F6351
0415FCFCB519A1506FEC65C9418C4C44BF856653591C1AF3D912725367F0EA9E
348FA3AF0587D4E1F7AB4DC45F4DF555F959777CE3D86BC4C0B3E218C4159AB8
96E85ABFFDDA490F96D1AB863C951862BFC6F9ABB8116CD39F8D8D18F7FF49B5
0CC5DE544194BB6AD7FBA10AFBB4D707700E4479759071644CAE0949F9A47135
A1DD4860B399DC009A81AA6DB272D61D65DABF482E540A67555F53BB15B1C5CA
96456D0B413181BBDB280271E63C9F5E1FE74616C6B0243F900F86E752B8538F
CA1DCE2E3BEF8C4EACB9EE11D659910FC0FC6DF4C9A271E3F439A6F224DAD796
32771BCBA0F0A526B125B6292094A5EC2C0F0A8396404606ECD8A2888489840D
6D3DC1A1270451712CA2E7AF5E2479EFCD67729D87355F90F0FD817A9B58920D
36BE3CDFF0A54BB4EED0B43190FA3CA7CAF5B378632B5FE26F2BF7422898D691
B857690DE86D2BDB0FE59021EF6C4594C0BE97C5F22AACCFF2347EA8D8D21F35
CD30C8A27A14ADE31305C751C89E4935D0B7B7FB5E02E4DFE5F02033B642EC47
4C763E4D94F18C123506EA9590894331ECBB8B53CB373821D1CF28A448818AE2
0D223DD333A1BE73E3BAB9FCA02359610143DE6A06AA5B36C9BA0080C8D60280
05EA1978834C2B4FC4C12F2FD3EF9EEF6A9F9AA84E0E215A8A44DE7734A9B664
37AA998F552C0C92EB391A5AF2727DC1135A9A73D33D621BEB0AFC02FC45F2B1
240C9F22036CE4D91F2FAB08A70E898EA528A58629382278B6E676734B8F5F53
70FF3619613BDE94EF131C7A28E2539673A464BCECA93A416B0C36CCE6265330
25C1EAA11DB03F1D78756CCD0FCA79DF2067D7523EBB7B972107817FD0A56149
2803728D8595873BF303C1F57EF49A0B90E2A8156453BF2A8F2BE1484B7A4039
56D7683A9F20CE9E8F7D467993F5612706FFC97B9766204E114BC5FCA3323D03
4A57B0A14F99779F4A165C800A08ECD47E2334444A5D1423E1620FAC4CCDF3CA
DE0D43F5248CD7CA8792D9F31158E2D59788AE3BEF5B2FDA42AEB2596BA5B680
1660E0608402596A23A90F7881F969BACF88F04D4C77F32A7E541CD09D009459
1D29B1D8841E67FB6C0C9B39BCB1F7E4B5AE9016AC3F15D85CAD7E93E4DFFDB0
4CC6452B24F259F0D2B7E5894CBB2EE5C5B1710FD41E9EBC5E132E17FB25F49C
A353F0D90B0A81C732EB128C1790D042192D51850E3B821908DA705A2CAF577F
C1EE76B90BDE0C33A1589F5902A7EA22DD7622D2529DCED2028E9A7F7411937D
4D76E185286FE394EF6A0E0DDA4164B04EF65114ED28609F21E9365A71C02CBE
AA73D546898122796E8DB02B4C78FBAD3902E1AC80450270789FA21CC9BE6000
12902F5C2594AE628F68589FA296A4B3AC534F5E7EBFF299C394B9F5F926D204
5D00203A2AAA13D918764D1694103E0D58F3CEFB590510D17DAAC2B793982A77
82976866A37A4438424D7F0D2B4DCF0B1F4D6241FA1D52982EEC15C61D03AF88
49537CA8C57D8909B218687F4718209777E93DBCE2730E533349E8F148557A78
9C4D355C106E8A1BFD930AAE15745C406D4872C6210C111D30C91A6622BF9C08
BFA1F27B882072722BFE012770FA6A8BB070C6EF581EDBC754B89B679D762634
D73699D39EF436CBA30F8E14DAE6971E6FD85FE5DEDC288703E66F32A0441EBC
937F66613B28F7F0F8B297880697ACE0D0A8E0A8890C56DDF107EBDDBEFCDF42
59E506E78BABC64C16D294D0ED154A98E855A3338FDCCCE9950E0734125D4BAD
2247C669003330AE3CAFBA70916CAAEC8749D0B84F44331128841BDF3E460D80
41A8CB8B79539A8AA991594A1C65DEDC31F6AC8C4014F2F19B41FB245B91E658
DF1E5820B54CE0B7C489ED5060009233FDE0B38C704FE0653D663B43A2013B8F
6B31D0950921224440BD2E37BEBAE6D5CC48D7294D06807B81F9B200D26840C4
DAE704455CE3320923DD21CA24755A64E41BB08A06E3C9ABC682E3E2C249E0BD
385C85C8722D985E86D05E187B082651739FF58944E7BD0FD5D6706806BCE484
89080BAC05AC19AC8C77569A6D34889EB0660AD67D3301B8CC18839B580A9A84
CD64D5BACA36AF42AF3C7EC97A1C0EABBCEF98BF2B42AD6D4B30D8E5182955DE
6BF42DBC076AE4BE6B40950D60CC34561D47BB1E24333E403B071F6BEBBF761D
2D72698ACA7E1175ADC77EF37189C32D8598046EF6C30918C7225ABCBF1965C7
EE7153D4DE8C30AB195FA9236E1D4AD8B8F6E1AC998E4BBCA59F271BF062E34E
BF9DBFD81F5B2A68D91C09CBF63B42643E18845DFB9FD3BE6468FCDBF5C66717
1213A0C1B2F22E010F58E7944082A442AA0A225F85B9E8DBBE20A1A43A369ECD
3ED0FE2F849083F461106C082880D0E5EE1F9CE2EB9FA1B2CF05DEE63D5E7669
DB8780741F88D7F9608A38694E2CFDD04B427C3954720342AC615286E4ACA801
74046019CA6D228F3AA82A8B19824E19E4C656144309CBA4FF6EF8AC769ED5EA
615DD8BA549BC928E2E09AB1D1CAA067689787553C6B74C8B68ABE6671777C33
45BE8710B3C968F7E4FC254A1F14C40A23BC27AB27BE301B339A7FD3AA073275
5AF973D887A45C1AF2823A199C7C555DE363E5B8AEE6E9F5B21CCE97DBCA085E
608E946CED095BF65D67C871426FE8D31F8C8CFEAA802AA756D2337FBFA375FF
2FAF52C96FE132BF6978071AE1B0E4DB43A1E052753B72FB0B4A83343F8A8B3F
16354F545DE0C034F2996C80265FDE90D8A9C83F5FDA9015422DFDA605F7FCE9
76AC98564DE61FD279F73CF330BC63A694180E0B8C70D25FDE544CBB565C310C
12A9B74011C3E1EAD21ACB26D732FD54BD2536B4495DE7D5964ED43C80C18744
71D23B14C25A08DB0C59EE6F797B46DB66533A621253B89A89707CC2CDDAA2AB
F8A5D085148EF1582AA2DB21114844CB5C9BD761BE7E082B43B946A49CE9832C
2C997720225FDF8897F35FFD1384D7F5C1168F0FB0C66653BB81312AB642C649
A0D649230E17E9ECC1D4BCF6D20D263B82FDCBFBFC58001BEE19D582BC41BCC9
2E0E64C721A0821D8EAFF2CB0EA7EFAD9D5A6E5A3D2892A06E745EB7E6133397
CEF3B0D9C79644CC4B6E36AC2DBAAF6A59E7C26D11CB81835266CF6DFB510E45
DFDAADD786D67A7A0496F1D413142801B9F8852C8B09D9CE68E6236C53296E02
371B9C28934F651C1D905EE7C2CC650E9629F95828470B27F4FFF1584C225C5A
4EACCE768714D743AC09CB00005DE6393FDAFA3B2D1B4B4BB1B37FB1D77DD690
6128A3616F1DE49BC98BCD8B404D801C9E0B9FBAA74AAA5664681B2270F8157D
C738CE7BE1B875FB9D5FB371D158B9534066A871C0EDC1520B58749A50F49224
8427361A89EA04A80AA6B1E6B0A0B5AA45724C01B7E72FCFB3A9C18AB641898A
F6769AF871CDE8E8DEFAC3BD6FEF6B73BE496FBAC0C5AAC706D25198297FEDE5
91F1EF81CFE93DF04EA48F6ACA7FA127F49BD2B5AC6398D36EE0361C689F75B3
57A9EEECF77643B493FA48BD932394A0BFC5F327BAD29E2EAE6C0F992AFCA49B
AC21265A3ABC6B8CE5B2E15D31515C40AC3B2651A8424ECAAE7E82BBD9649595
0444DFF98B4EE57CF9DBC86088544C5BEE146CBFFF272E9D11A538F5B699B0C6
49E9F93E37941A424F1A4F380991C59F42C10580DEE2035ADD91AF1A72019A7A
AF8B0E344F061A171D5A35B7F4728DAE7A09CB1BFEC15F5C1D6BA5B7CC2184EB
71B0C6EE8188C3435EBA5B3DCED8B094C2452BFA29E111DE7E1729F34742F681
8331178AA630E17B99B26657BEFEB87FE71170E3D00ECDA7E38B72117FD368E2
58280C0AEFFC8575A8E263D1591BB7E1ADFCBD642AFA51CAB8D2A3EC5DB45365
3B6C6925E174A866040E0E5AF7AE73FE419DB00C65387613CC37FE519B9B9747
61802557C456766A28094C4EA3ECC0322C1BDD7E62519819BA2E190AED9EB1C7
07FB77BFB7FD3CB323D8A912881B56EC42E49EFA180D8D9D5B31B990C47FFC68
0B4B8B099502B8D13FEE8909AB98B67FF273A0AEB4171430E9AE089785FE1E9E
A2735E974D54C32CC7FF5B83FEBDD01583FC7719774C67BB51C4787534F16DBB
6ACF6BE6C0BD7AADF452F57AD1BE8AA5A462D9277B15DB4E368EA8477A5BE919
E51F89230AF834274984B73FD1A00338059B5F42D6AD96E4C86D46E73FFA5FCE
A56FDA2A7CB091261DE4C8AD3E24DC02CB21F131722B6422B5CFFB32F2C4AFCD
CDEF6CFB947F63826D67520A37277BA9C2B5DFEAAD5AF41BDC655E079F404CB9
B6F7EFD341580F4E048F4918444067CE81688EDF378CC2C20E35AEDBD11DCA20
C968913C526AF5752543F1C4FC42F7E67EE0EC027F00B928EEEC79C8544B3BA1
99E5C2666736B4F98FF96A1E3022E10A475879A2A11183A3A911E928A92DEB85
2B808547F59C1A5D1912904E8AF91E97266C5745C4AC640F4764388D27CB145D
4363192523577204F4B1523134E8D0FD32A633D440BA072BDCCD662C38CE7A04
CDD6200056B61256D36B58988AE424AC46B7DC06BA3B8622AFE952A07B07F3DA
3FD8BFD3653FEC7EF9AB2E416E3A9EAE57F909957BBF62C5D9E77153DEFDE00D
732C5FF07FD0BC95EC4A8DA7B8B252C153800506923DC238869F129A102D8569
9E25DBE95631A9CE78D1A7D9CDBFDAAFBBA6A0DEAB90FEB915106993FC4BA84A
087AAA4B52F2CE8FB0BABE5FD7F7E180686CB6737CEF9B39FED5896279B1EF60
9738154DE67D3FE82877591CC7BBF0D37C86B73FA3F43353125DB4F399C3B91A
6DF5B7840124E2B2D8BF1D091CCE9776562DE32417D5E4C24854FC406AAB6FC8
FA5CDE02406A76A13538CCB4173A68FDFC4FDC34D0487BC6EC516B3DAFE11B96
C5349D8F370254D0888C71FEF024D8343A3E2FB4695B0FD87A41C9EDC23E9B78
E7A7117138C109912D4D61704FFC3009122FA754FE136CC5372FE8E710A2941D
86320AB1AF38EC5B14040A08D0F5BD5C124627274B0535D8EA48EE3C565A55E0
43808B9511742686313F633F44206DB6C18BA93DD00298388452E58D97CB18ED
EA4F8D7FFC572B54F5A5DE1CAF21830148633D771A3AFFCC1E37E249EC29691F
CA8E5980C9FCBC27F60E02C7E0076BB4A82472C9BA3F783317CC7A6A07F25F01
6D9AB5116D44968D4EB33399DF3B43A29D04E9603D1019F984ECC0452F4FF7DD
465658757C2C135F5B9A7145197A63E59001F052D50506D8006F8155BEEB38EE
0D06C47D0F2B041172DD8615E93CAA3D91A7C8FFDD51190F7C5A93EC476F36AE
034B430C6E3662EA3BA8784EC38F0CF0119514A3F0A0FDF4832B08089BBA481D
BC7998416D3741B6FFD4FE0ED4520000EA7ABA907D9117F0DC6E4A2906A25646
7AD8F628CD0B2E57A94363D2ADFF3C8946BA8171120F79A1EC1DDD96F4404D25
B960B5D7BB7693EC064672187A25AB7DC2C7826A4C46C4A3BA37C1F1EF2B42AB
4DEE390A8F96DC8F297795BE9ACDB6D0024DB178BECE672B9D5B7C7227C76F79
C426B1320AB5A26F52ED035E255B615CCFBB8CC72033F950BD8E6347C21BBBAC
A17200B48F2D413979752429121F44F47A525F7FD5A67AF11A87195AC95D009E
D5ADABCBBE81E93A3B9D64CA7A69826226BD84E690EE3723122BAFE0AA74535A
3D393F3860D0B72AF00FC2A9C27C4129D0C741337426CE21163DBD941EBDCC8A
C20930D814C6A34AD070EADEA576EA7D9D5C3D5140434A1FD83B32C937765E7D
E4D5D26EA4632349271E4FE56F17A2B531557FBEB8A1EF5EBED6E5E5D34F551A
FF114CF3F4C7BEA6D16EF9950690FC377ABAF930ED92E7CC6CC0DD2D0855A621
02C8B83629C41D029D4715DD90AA80F8AEB5CB5386189F6B8F95444336A90EE9
A716020E3C39BB0B82724C1E46970EDA487733A28B1A993293389A6D53D3106B
A76E01E6D19B1A4317D031C23A548A5AA340C2C5A5454AD2BC28E65BA324640B
70E91F35146D0EA924C7EDBC53E3CF5A0174FAD86A58DE867982BD685E8EEF64
E85D03F350E7FD1EBEB955468E74D98B1656CE938C5452E48E541DF055DAECE3
BF2140C1D8FF099628AE91DF060F92D7982DEE1BEAB86AEBDD92195A8CB93930
5FE4C38A17777E69B48B9FB0C156224052A216DD53FFD46D830E4762A13B0BAA
11C4FA7A43AD784DAFAE0F95F72EB250362415937189B31E431317AE31B3415F
41DE86D53166E72DC8D14480849B85FC69A20D69645D495BCC566A73DB5DABF9
C185ABC01C0500F5249DD85CA4A1D6EC57D0876F973BBE27ACF1C99CA2F1D1CC
8C860C8AD469BF1DE144B198C74C00F8109DFB8F0036549C2F456D391B00D15E
6B962D0D67244137CF5B1B3CDE06AC5856F11E3A90552EC6E1219AD9E1FCB0CD
5588E6715FBD3EA5579EFCCEC7C70245FF69F9F47328885CE670B8D5DC4567C7
511F42837495F43AA09B150479161D2CE7EE2484EF1A6256F87C5EA479802A45
83EDB31929AC34E9C719BE47D8EB6B3D65344CDDA0DE432CAC209C12D44C420F
0E537B9D1FA54E6D8DCED0C99B529102D17E4BD0D7432F35638DDC84D65558C3
61C4ED1B7C54902C2C254DFAFBD336E514B8C1F80FF049479C151240B1BF4626
7E02C6E2F295FEB87647D473D1CCBBE41FDF885CD579937D5AD67A86675EEB68
417584E49F8AACBE98B137D813C1E9BA42A2204A7F9450B913F43BC958FE862C
043F5EAA97859FC351EA56BE2984EB136ECA5AA097996C331610D289E58CBB3F
78228403F540D07A5552BE130EB7E5D64346CB9DEF8A900C80F62CC363318D81
927FC306C594FD8C0C91F249270D59E30102C502B12F9A4D71F46B423EC16CBA
71C0CF051E2BAAF91E0422747E5ACA280BADF1CE3B98128FCE221AB5CBB518B3
7C00541C9D8E6BA7FEECC7DFB8F77379419DFE344DBD11111F68514A04FE27F6
8E09979697157B80B4DBFAA8D72068F9491C6D0BDE76B277CBF098A3204337CD
F1838B6A5103788F465C9FB705C3248117112D9A5621ECD53461ACAE92F6F59A
260BFCE7C040D190274838B084477AF5576AAC9945B837F727EA8D34D0129914
0E9C40F0CF42A2063257DDB017AE6E1ABB29F922CC99B07D20D9B69CB4C8D679
9F0FA85CF3159C915B7C99B6F28005B9FE3BCE540B5EDE5A13685F227CF32DDA
4DEB27EBB1DDD3BAC656B60015E7E877AF26A34EBCE4B7283C36CA8D2D6E321E
936F8F1C9949E18E0FE1F3B5E5BAA4E7AC1BDAA793A278CDE657996E41538B9F
B3CB671A389AA40DB57D18CB01B9EB4BBF12D0FDB7FCFA083DC2993703D7C2A4
A0C5D030ACDBE71B0CAEFB99044E1B7AFA78343FDFC45A36A946A43486E48A45
DA897485291BFD48B72E3E1272ACA142CF5F2D4A97FDAD865DB784141A663803
A27A02CE7CE5CD750DE87E57A8726050CD6F51055AC41A4210B8C90590FE59E8
26A0810CC8847976B8E2F9C670E4FFB3B1C7952E2E91CD154DED0B25804A7C90
04F07B25C5216F8D33F975B8A3503CD8F5C50B80D389012036D735DD6340CA7E
0A50FD7BBEBE1739BAD131508524338A3A36304BAA14CD4BD5F9C993C0090DD7
858A9BFE0722F3A24A76174E44A56FE689204A4F7F51836F15A1491B93802549
FA031E6E967537F2603AA829F87B34D40F62D180C1A4968E995186E4561F4D06
F616FAAC2D37874D4B414753E46A5B347A6A684758ED9DCBFE2DF97229A8F846
9240A43B26BCE26CE70F57C5AECBAAD9FAD8493C2BD8D24E71009A988C90FEA1
79E6AC2EAC2B23671262C885849F15C4A9227E90BD2E3D8DDDDFAB1BB0828697
4FFDBC62DB443B99718F7756D9B8145C1C227CC217F6B384FB37704358CD808E
9949337C91EC2C8DC9B29FB054BFB76FE006C8B927F2C371EFB81AB652EEE3D3
B0A802B515801F8F677DC7D9B2C0D4289F79BC63628D2040B3CD86C5AF05D83B
76674AEE9924EE9591E69BBEE32C0E9F32F10CEE25F6A6341F7EEAC793D760A8
E5F1279E54257F7BE939F835F69CE859FF566239294E018CA3E446BB6F458B30
5AC4EE25AF37384C994BFE51B655E8E7E8879EFBC40AA49F8828F6AA22EA0F5A
EA4873C0420AC3DED10177CD789F56B1CF001EDE4BE6F992EEEC6B887DC69BE7
C9EFD6B4F65C5E3DC3F307A0467FC79135B81AC2CF152D18252FF6C0C3FF1BFC
227ECF0B79DAAC2D8370164D34F021FDEC2E1E4D8C2A1A3B9B3BAF40659E5069
DAC75E0DC930B37CD2E7BC88DC3DB98B330E4DA56184BE9677468E9B321B3CE5
8765BBC3EE2CC67DEDA5BAE59778AF41A8230D625B4BCDB2CD33E27A83EADC22
D3DFD3305F1AE27744F7ED13E38944C5AB2006774EA24C8C36D5EC7B608507F4
6E67BA9A876B4F5EA8170D882753BF86A6D20D88E6BE2695C1609DADFAC24C64
9F8B5C0DDBECD7CBBCFFED20F1448CD7BD2C6A2651E65669E42373AF0A33ECCC
910C507E1F7463920C2B6ACC001D69F44C5D8116DA8B458A91869F76831DE4BC
A6DD093F72824BCFC111ED4D7F819C10321F3B523DD02C70CDD949A6ADA055FB
5E8473482A4EEA6D4170CFD3075B37EABAF8435390B965B12F4B251D9698D11B
C52B088D449AE14CEB99E27D331F055947FFA8863B1695C3F278856ACCEC7BDF
254E41674EDA2ECAFACB5DA8D8FB6242ADE2A4871364B5B42702A3071A450DD3
B0DBDC0AFEFEAD74B328F06A70FB24EAC27EB8686191C8BD7F8022B2D73ECA00
F474E556B77A77385D0BEA33FB380BBEC0798E8C667DE00B7AF2CD32ABB537B7
D96515ED04779269
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/UniqueID 5000794 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 56 /eight put
dup 65 /A put
dup 71 /G put
dup 74 /J put
dup 82 /R put
dup 98 /b put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD2E141C0A7B647030FFD1FEAB8CE703C40802E0D32EF0DF87BBD5131CD110D
BF5A11D66FC2087779FCA72E245C6BFA23F60759FECFDF932C3026D4CC21D843
9789FD52FD7A85BEDF58DAB6334F4880C2C99F49C0F64025C76E0550BC4B8AC8
5C7E817DBABA0E78F36954E9922286067E92E69D23E9FD278CD5F26788A7E5D8
476DE8E21397716DBA03B23D85CC8B701EAA654C5EE74F40D6C3AA3F46E30A2E
E663C2CC64E2DA3631AB809AE1B70CCD429EF7488E7E5C782C8311B03F19DC37
7EF382AEBDC3130A05259B885E07B50701A7A98C5B2D07896534AD7BCA233A7D
21FDCC48F92986F516F8F0DA75C9221E3F45BC7A8F8AF3361EE4B989D3A78C6D
26DAAB0F7B3A0929E77768E18E2BF673AFAFFCB988137604535CD7E8451B695C
1421F3099CCD799C248748B186F9D8B00FBBC7B9C635BB8D08FE653D05C3F05E
3ABBE1ACEE7E3F02C7AC1613E545DBF5CC6354F9FB84BA958C2565390A99D843
CF5C65F25CD33D82395549F71F79ACA87D8BECAECC436FA46B8F68A1F86006E6
F7EC125F98C49D1451E429397254784BD36372B761433BBDBA1826F4828C759E
251A295888F39CBD1FD8E95E38B0DF36A8825B776F2A5192D331F3C8AC646B2D
348C645F9F036424A8EFE5DB242157F4D3DB05190CC854BA364EB4608124416A
8B7D041BB6888C4DDF9654EE5C07BF50EE7FF929F9906B42D727B9965BABED8F
E8BB6F577937EAED98AD01807067F98A010DABFBDE1E8729C2FFCF30D534F126
5F6C292E55CB51F344701405645A9CB5F402C62B2812F25B55E4D3C6387D8A70
4CAAD3C6ABAED32DFE731360E35AD600BA19D64672933FCC6E92BF9314E8D760
C3A9192FDCF4AACBDE1979E40FC5BD8833116583F131970047F3EE7FC2A0E268
EE5F86CEB091B68E0AE33127D1EF910E910D252BD389791BD327C5ECAD9CD585
00DA809573775054941D86EFCA45B4C7F54725F7CEE7DD6EC2F0D991293ACA1D
ED37050E53DD4E6AA8078126EDE30DACD2E4D427E422342A11961764BA647BC4
AC4B003506CF106A6AD78D9B961FD6A42DF593544DC15CD861AECB7F397808A9
45A6174A01D8B022DA7B9E4EF675F0B9D77B0D594DEC1E733C3CD0500E7FA9E7
CF8D6C768D791D09FC3085B4B3466232CF366562688C6BED157ABCA84B5854AD
25FE82DC7CA4E4DC98BB3EB593307B759B93439099E601D7C34131D7186D2D29
58247BAC82070327BAC4A1BB6449C20310F4EF5D016261028F22A7E624122633
B0F0FF817DCFEECE4677B5B3AB52D9A24A3EABA6D2970F65649EFAD2182E98F6
FCB920689104719B4E284BD2939B02F3C09ED81646E9FD354ECBF4E5360E104D
2BA030F09337DCF93B11BDEAB8336FD61366DDA6A2CBC487E616B477BCD7827B
9349ECC4B99A7DE7EC08B68324E2801F394BCB3721B637072521A8EE5C600C60
11E07A175F91C22317D6C2075329FADD6597BC88CB89B1382012675D850D5A98
2A60A0CD340DA92683216F3887AD5A77A220AA1C970E9381149B854C0463B558
8E064F305F00D882DBDDB6ED31B3EE2BB2FFA43E9E86F442C17B9E9B36F24351
4A8DC08A568A812F8F2B78D33734E5E9B83B55AEA5D7625392D30FF009F9735D
491AC2BE4D436FCACFABBBD9D05618445A83FFF16937B2F2C89845DFACA27724
1FF374A9E945FA6B64C33D3174A1F1FC4F76C7296086E2E21E3A0223AAFA132C
5E41E5B195BDF41D6186F78601E7C63A6F2B70531D15168BFE9D79BE60CB28B2
2D8DC2CBAC2B3C10A334B8BEB77A78969917FC896750E62E87CBE4BA6FA5B9E1
E7FB77D30149F3322686FA1FEBE6722104D8346B61F93E2C525FBD0F1FDF2A72
88221321D2D7BCBF4F71AC307D53EACDF2E911693A7C72B36CFB11CCEDE89794
C8595B6DAD192B88B4718293FA39CCE4AB61CEBF3A6F675DD66CDCD53CEAFBDB
0314714C6123F762528FB399C0F9ACBCFEC5056678A8460E13EC732BA5997B6F
6F417B4FC2970379F25F68B85962706D389F361A5CACCAA90C53244A9C6F5E32
63163772C8A4C45BB5631ABF8442AE82B3B60B7F9B0A519AABC32924DA73DAF0
140C2C49033580316724434DAB18D387013C87892DCD4ED895388590D124B9E8
78390BABCDF97CA47BB51570DE9DFCD022BF9AB3D5D3CA124D8742403A22C640
B49AE2A36D80686E52BCC708F5A4FB330E4117CB9E717CE7DCEBE7604CCD1477
689165A9033131D8CC0EF7EF65365D5DD55DBB2986A95C85DEEC592C51B8070C
525C955022EB9C604F8F666980972AF63B0B11C526C1ADAA75DC006BAB33F69A
1610D3A8B0C82ECD600D732CB7F8D9B878F99581813A5E69F26DF19EFAF25149
84A3B4BA3DF6761EC94602C183A057F8F22415E4A52751606B70F7613F427BB7
66DC48142DB9551F1D85B87E3067D92ABAD3EABD72F4D0C198CB7B834BB701D7
94FEEC86876311F787BD7AE505250B3FB04FD687C7B9356D0E0F4523A31B2AAB
771E7B3A8E5F4FF09110EE8B6079487F75C10B459B469CCECE16FB83EAD3EBFF
0D6549EC95329C58E6CBAB2910011E2AD3C64949C5DAEF9BE09D1B60F7C61794
C04675A10666BB8C53D42A5BDBB94561D05A10631401D4D4A5BD9149079E9FDB
C40F50802983DD53F4D15F2192D3DAC7B2654CB961CDBF78B5D4C347C943A8AD
941FA3D326E9BDC7CE4E767D345286D71942D01BE7209604CE6D44E7D55E6060
5439E9297EB0F9A00D92FEBBFF9934D6483F75C635A1E0F4DB3790CD877DBD7D
9F66CE7D29DDC2B78496F7BDAE6C58C86FCA7E7402F1653EADF59122573A7A63
4924FDD2619DD122B306BD8C4FA2B1FD8575256FF8557C7C3553650C0FC46BBE
F41600488DBF466FD396DACCBFD7601178B1B31663E0A6F95F76C81092617C93
19BEE2CA9DCA87B84AB2A8812FC072AEE98635D7F86EF5085D821AD86690279F
C8F505E9E6D93B170A3D39A55A63A0E1B34377ED0170842894C78DAA3CE85C30
E081566ACC50D990E5BD1CFBF0E48E2A1B6CB6364ABAF87CA5E1BE2E043E64D1
724C34231DE2612302EAA9E6D980AC81587266D3F6065A1F9319D707C36ECFC4
9395FA13B02F927A41FF8AF9D05E8B7F09FF25C343B1CDC2ACE22DC270FEFCF8
31DEDF7A4FA2B19936AB788AC9007AC77F1AA11A8AFA6B6E04CBA5EB0D68243A
71533BAB69C9EEBE0B99681E64142EF70FA4DEE9907FFF5FC1B72E097574873D
D044459FD06F955F48041B46731689C1FE4BE92C98B9E555B0440265AFE32259
35A29B499C8B74290A8A6999D8178C97CEC000C4101E3866F4341CCA697E23E5
E916C904A1F7E4EBFF04E25CB3C436109454E5FC6711F624DE16F693C48C12E5
1554AB257849E23DBF3E6A03B814629F51D7B96204CC8C238E376C4D203207A3
3F2C3E9C3510C0E413CA516C9E4E888A207E2A56F9943FBCF3F0F910C709A6EC
87ECBA929733F5F43AB0BC0D93134F8194D478070103AA158B515356EE64CA78
9D29926547D0954D90AD227E695E1396ACD088743ADA0D2BB28EDD178F4C6C87
CC693DEC50843816C3D19007D32FDE258AF91AA4766850028503A882A8D79FDD
F73F6CA97E7EF5BA0B21BE7189468E95824D4B20F0339E6F2EA4A8DD13514B69
C37E538F34BE0ACEA1CABCF7F5C62D6FAAEC4E8F4401777E2BCBBDC9AC110C57
49409510D865FE3910A36762BECC711977463F1905D3042DBDA9BFEDFCA2E5A1
7D9B7BEA7A8B41B94A8D361F3972FAEB84A276F480A08459D6E042237F74923B
2D496D05D91888E8806599DF3B134E3065C2F87507F2447FDCB25D918358D9D6
C312B5316B4131090483828DC9480732E915CFA8CDFED88BA139B81367888477
9F0104C9EC27C7321221374C149C2C6D51DD25E6C5A70DE83342968387A334C2
8C228134F73EDFBE7CF6F1C460F31EFA9F6544D55D275D1FD77B386ACC3ACDB6
AAACCF30FBCA0FABDC074C4BF7ED602B0D2C1E4F78F061BC0FD85D7900727E67
8556017F3692DF44CFDE480F41A9C51F7806EA520AC88548D80D0DD9531041D1
368C88DA76D2D585A0D43EC52A8B91B38B30ECC9ADE3FCA055F7188ABFABE8C1
86B72CF244D884A31DE7B617E13191D1C552312003EDA2026DC62D11B4542A93
7ECB13AA936B266CD07DC49176CF920B7BEC2E3627F78973E7420265F1366117
F021DF2B7C0C452C157F66F8A46E37ACDBEFBD8521729FF9849D2B99A568A24E
CB4CB761000B5507B6A99AA90784904171A294727FE3362481B832303DB9AD05
E260523D9FA03730989AAF311EAA860DD536F8FF4A069758326292EA63A40EDF
446CC0856B7D5C38BCB093619867DFFC3DAB299A33F6C8AEF5391882A12FB6E2
FA96322E855FFB488FE7CB463F547D56F759F21F6DB9B014AE2EDBCD426A792B
50A028FA3942883DB81CBFCF41027CB0F5B7AE538509EC488F65C61DBA70D5F4
739CCB02F35CE578EC103B187C7A423D17A685F418C02596BB7FC841A7634B94
DAF0F519E5359FEC9A2977151C983A713BDF07F02DEE90824595AD41D8696610
C4DB52AA673B923C90011C70FAEBA821162D90AAF509A03774B07135FCFDB716
835067DDF5DF7F8235C6965E01A742380485777048AE34435930CC57AEFAE9EB
BB48540A3C75CE91B09267174183FF1BC400487F5E86E8D0700EB6B2310023F1
5C86039370B66E425CC07528D0CF41FD52CD3B05100FA86E032972CFE57A4ECF
DDF3C0EACC041F944D1906D4426039EB7928E4FEB7C2DF6E32AF601820CB443D
BEACC12EA0C3B6876881106AD4599C915D678A5A9AB31CA3070BB783F42A3F53
239C63E80F7FB10FB1C83C61BF081F64B4947CFAA78A93006D2BBC95ED364CA3
AC40AF00ACF31A373A2056795B328FF38D0168A48E33F667B72C78B5C1A7BE40
66E1E9410181BAC3DFE7C55F95CD67348301157CD4E7F33B12B7D64759763681
DB88673A6419E01C1E17506195A4C10BF0C77EE89E3B2AD4C2D84A05066A68B2
13A8BBEF7BD24634A645F3F90D3BDD6E2CB091EA37D7BD7E71BD27CCC4D757FB
43618E950753114F1AF0D1036FA5C79353030DD3F0049B1F8A85BDF6A5971F2A
17CA5E02E5B29758EC9BB16C4884BB5122F662E0AE763E0538D34028D7DE6B43
A55EDB9D9D6358F00D91F9CF4CEB04D6A9A33873A6B23C06E4325B37F3D72C3E
9D1B3F6047CB3AF2148BA7684135F7A817C71218E98A42147B25D487CBA605DB
DCD96E17485157BE02D664F5BE94B695A78B1AAD2B75F8A30EB8B48E416D78C8
88A7590B9FC88D9AF96F201824BC09570EDB2927ACA452D98BE61EF7535CF76E
6C738B3F5982BDB69EFBAF1EC2A2455605A2455771E332544080A34C5FFAA6F3
FEC9CE4093E2F1A817C59AC8218CFA09B74D5D912D8EE3D04D2D4DEBB8850EA8
A5CE4608263AF797B34C5658BFF60125B7C282CEB5441322ED5A57F8A499775F
F706D49820C944C89E6DE591DFD7F3F9F994EFEF1084D20882EA3E774FBC8816
1A2A721E2661C8C22DE5BAF1D6F03FEAC87456F9EA4E90B214E92BE1122E0203
BE174755C8C5D86A86944B3BEE59699DC213EBC0BC1EA18323ADBDE7A5C2EDFD
C2566026CC4B8DE5FA72478066CD725DC2DAA71FDFACA58B52B9C320244210DF
D6D1C5E9FD33645DFFE49559E4D49089A3EF8B75EADCDCF9B97376276B4C7D97
C41ADA53419F03CCDCE1FC8BEBA4104A80489C0AA79BEE6CEA7B2E1CB1C5E96C
6458F526FB52D90CEF20A7555436B8D56C72D4CEE573253C9EC21FDEE3820E20
C429724A48A8C36CB2C26BEDA1052C4C9B28C2586A5B89B00E2E025D87367A35
739A716B2CD40E45422BABF76CD61AC53096FA0FDA489BD92D58CA0DCD6E4DE8
60B2AFF8BCE1A1DE393F4D7458939F36F921ED143F044D54E34EC01F6F17ABDC
69D4906239AABFD49C5784AA736EB99701F5A3631C2DC54F080C15D87825273F
6C4C114BBDC127BE069E3E0E4A62F613DA88E64474B5C9382E3FA1A58198CC84
193B397FFAB69C9DAED6ABA3DFFEAC3D791D10573D711BBF96A3CCD4F985EEBB
3686B2D9A17880EC05D617B7924917B6DEEFE0ED4ACE0905EC5BC5D2AD154557
A8711F394E13A8749764352D8C9DA6D2DAED0703DE52C771287761F54515C216
9A1FB941F2247F3AC8640D5790148CCB8F9DFB12C1D407930B0478973F49E173
4F7B8FF7BCD1BCC8AB62506B58145191F7A23FE41BC9A94C7C4A467CBFCA911C
62175494E00E1BF88DC67E740F98116E4FD5042E931E760A2C3180B9071B8929
F8F27F08FC17739C108815B1D2607AC544A0C11CDAFDEC5DF77959B75CE8EA4F
327A4BDB6E0B614430FA5E4D95A1F32402117BBF3C3BA22CEDE72B58C69C73DC
9C0A51990F26006DEAB841FA758086C1331710F48FDD740889D429D001F883BF
BA365964AEC8B75112AA8702BFB67C71D7DB2C9B1877F5EEDA089786277E6A2A
50053209D15B6119189723D27370A8584CD6EF58B950DBA939E8A8C869FA1054
34
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.0: CMR17 003.002
%%Title: CMR17
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR17.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR17 known{/CMR17 findfont dup/UniqueID known{dup
/UniqueID get 5000795 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR17 def
/FontBBox {-33 -250 945 749 }readonly def
/UniqueID 5000795 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR17.) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 50 /two put
dup 53 /five put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 71 /G put
dup 74 /J put
dup 80 /P put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9D6295729076BD8E
CBC0F4C1BE246922D2482233846A96D867B66D9CF25A1DB661141D36B8506E61
A022F9EF8BC1F2F674EDF1533E67A78CA29A612AA9268E113C5EB84DA56CEDFC
D7A111403E6E2A8682DB04368889747E003A124395ECF0C7FC81218552EE7C6F
60BCFB4120893528670D0E8A4117EA5676915E3591AE5652D003EEF67818A41A
8882E102AEEEBECBD15DCF632ED246A6A58B6A7780DB6F1F9AE3FDAC8344585D
E104F2BA2DF06D68945889A2A3B6C262FB53FC670BC5EB7C56887FBFB7AA7026
84115872CFB0652C6BB330447AFF8F0F665EFD6A41D6DB6877B08052F402448F
CB21C26BDC900636C99CA347B79AA73AFCDE9762A992CA3DDF7279E5C50F453F
52098529850AFB1F501A442D6A02E0A2896F81C8AC735AF1E7EE47208B4CC944
649DF6802EEE813F1456205C6126D7D0B1821AB62DD65468F3A30575E491623E
0054E2E680E4402E1C8C538DA389B81603BE88D6DC287A076F92B224CD58A0AC
44B8D490197341808DEF243660971F444A560C747BC6F52707ED42A99736ECCF
EBCB694A561C3A70A319D204CD40D402FBF937A00BBCBE85DD26C9E3F91B7D10
D85B9D314BC3AAD5A58B107F5F341BE2C53490924142566417D6BE03BB4977FA
6635EA58DEB9508E40B9FFAC75FF44C683680CF242FE210519C9BF92483B0A54
83F48341318BE16D2F8C988FE3DB2E7914581F579D5E323148A31E4ED03BC24B
C990372DF5F3B0C5FA32EB2CA4FA0EA33316569133C87697BAA2292E685C26CC
F8CD40A2366E60B47D47CC9D0FA29D2836011376A07F78BA7664DE96E775CF45
9BC91559A063073A4C2FAAD0893C517C5C46A1425D07EDCC2B57162E3A45103E
FF26A2D2F98B194256A4B052AAFCC08965A50EECD7B9E8F35AFDF7B6568B3983
8030655E7C2BEC961A2F20539D617626E8454E3FE9EBD3EFCEF7F63498441DAE
16CB509BF239FBBE25EFEF07A3E16C9C71EB8D9DCB8403916FB40FD7F4E1A52F
72F2DFF94FD14D7D49FE775390C17C37C1BA0CAF35CF75D682B7833A83224158
D54CE962CFBAFB1B2CA50B60CBEB1F8F58DDB2F5470C355ED9632342D9382AE4
5D33BCA3A0A25EE9E5B39BE5370E7F20684C664EDB48E7973FEDAD9676F9EE8F
701CD4D8CC9B9EBC06E8C86EB88AD56E15CEBB8E1930E8F711CB6E01D5D14967
D7E6C1BDDDE2C4D00384EF4CB02877DECC27AD53FC981338977BA0CC0257CF7D
B42E9BC91AF45D9722461EC3CD9DEAA8011FB855FE14B74BE0A102008EACA2B6
0E287BB4F466FBFDD6E65A5262B9322F95E20DAB875A10A84572D982E6FC7ACA
23C0C37E5EB47B8E69C07507B53CDD98CD1B6445E1699CF35B3DA3E0DC56BB76
F997C40E2ECE47DBDDB707EB527055960113F2DABC87FD9EC7D0AB36B400CE33
0D54D4F197B2830B43DF0AA802DFB2BF747A4C44B31FB708B2C8BBE1955A6A28
379C91AA4CC065A50098AEC0B837E180B76801865A43C74859DF18FE1DA1483B
C17843BF1C7E1B11A8C6D8BB8CDB1D552FE6A1FD0A696A8F7405F2320F8621EA
17C1A32056C45A9ED35D2BD12D02D8B26489CAAEBF4EF33B66FF4BD9B46E4823
6395831A8F3366EEA0D0EA88D612DEBF63DA7FAA24DA979ACC1A52544BCAA007
6C39946BEA6076ACF45722B2B8E4D0823EA2D12B14A98367BB0433A21FBD9F94
18DF298C56F67ABC9DB1868D431A854DBEDF8E1F49E359A545C75A7AA1FA4D5A
50F1EE6B45FC68ABF65FFF257964E4E50D8B0C1FAF498DFC554073697C2F219D
4A68DA9E873B270B9C56F0DDBC9927ADAF9203FD684DE615F68C24ACFFB44690
89C0D5322049FA69E7FD00EFC9C9B2BD177B5B339907F81C31496662847BEC1E
56B5DCDF4FE618970F4268F475B2EF7E0F28CC986DDF098E59DDAD818649CC35
4080C0867A884B8177A6880F06F1E5CC130AB4243EF8DD8032FCF390765BAB1C
1F0C9728EEE261A09F8C1D7ABC7A6B1550551BE2A7D19D45B656650DB00B3A5E
B3E1186043E173BB4DD5EFFB379654F88146382AE3F7196F099BDCD6D245FB6B
AA2FA9B6CFBC9F0CD52798DDF2F13874BDE5B124DFFE0DD93E24C9DAEAE4C3BB
71A9A13AE2860F620B4EC789F95221015D9C510CB4AC775EF69DB9E32E59C896
1AF82C9F0DCDB4812A37761859A3D3BA0CA57F244489C78065346FFA78F5F7C8
0B2E8CBA9EE62FF5C27369D0BCD52857D40F1FB8F8A1441B83565A4150AB1945
0B54D6E49F66389E43096269EF5CDD39526A288C0CB81E324E75D326EC9A182F
2CD966368CE300B41873B08E17C3E6BB51804460D2562AF5A12339966F44CD09
114C6809AF246B5BA6937631842CB9417781A58944B6BA4FCF961465C208957C
81A662D560D0F81BD3CB53C06B6D979F04F6121CCFD5D52702CBF6C70C01EDBF
2040AAB9CB144321E68C4010E0E98CCA2603EB55DD62E881DB621C37EA4108D1
528ECC7A0121B57C6BB1E26F8AE7161ABA7E88256D2D6A8B7CDE2E730D137493
3FF628EF6030DD2330D747FABBA03B44CF600418C245C388F33EC5559E7313BC
4B530C4FC12530D38B27D6408548F25FC084DD0523B27D29D6518D3115AE7755
37162CFD4CF528214466FE525B13782F9C3CD78F3D6C7423E63A134C0A371F15
10F4ECE1D482C647B563D3D15586F80BD9DF7381BD53927825D5AEAF762E1CDC
3BD184F345029A95B3AD4D1B66E79AB4F0809418C0CFD4D503457A190D02F134
3F57FC04FF655AEEB783D6791E4EC300755861837D3D50649F6B7F60766211B3
8148F8E575E28D6C2DE75B15E722ABFC6DAADAE53D89FD295352781DCC2CFF6D
982F6DB778D6FCBF1B7BDCB53F3A23AE6EB499BBFA96E8BE04C3C8E5B660EF24
01EB842DAEBE979F2C2DB72AAB4D21627063B1D3C6CD40944E4CB81655698FBA
A343766CB22E392E5DAE01DB33A00918D6DAA07F2F38B336A3C5DF3708865E75
0DE04D3AFBCA27A249E97377D5785B4E28EE0E93F7D353619C200DB967372ED2
153BF8BE945474266EB2FD30F80042A11B7E3586DE4AB1FBD4A741D36DE583E9
1CA25DA345520AA60634EC819E7EB493CDB128BBADEC3890F055455F060A1100
D5A41D7B180027E08AD6EE7E393DB9F83799544404FE397F557773BE6A130541
157C0EB37E036C94825B5090EF85F8B4E3DB72895D86687758C20EDEBD6D1079
196E9949DC6ED0113571C70B150B37E446E319EC54D44CC0CF6A14760953DF4A
D0E1F33A54D240E236AB63B35BA8E071D77776BE5B9312245F2C6E4FDB4312A0
0D9CF723E7D9A3D8546C4739C00C301A89ABA60A02757AB1A0AC40B24CE6CF12
5850485B11E16646D7150795EABAEB08364A53161111F46A7BC3423A0D3BEB69
BF15726C1F8363914945DEEB29CB8766328318AF3B344FD6D77BBB92BD7FD161
93356493D4D8252AD125708D47C124E44232FB2BF7DD75F87889496DCDB75D03
F58A57D4122CFC194B75A9E9C4789C9A33C0435FB4ADA16AD4A6191928D1663D
05FB8152C0AA176FBA4755205F8A66713404787070757D3721ED6E6D55A59DF0
C92BA8F05EC7BE05D0A2E66DE85E75373483EA3BBEE0F0DFC7E2FA5FBAFAB118
058D095AA71FDFC8AF37E5A98406B64E58BF476C6926725D7EF3C2346CE3F662
1E5A4A18D966479A37070859014719456EA2C7F23E68E1AB2F25ED3A0C00A18C
DD403506923BC983F89CCA125780DC76A411472E38173BC0DD4CDA7B43E13419
B5AB0B9A35E77C58BBA12AA4F5C7EBF8A29996B059E4FAE6809565570442AEE5
D56CBF4407E1CD9A4398B1F3ADFF023F64B230E3D29F526B62D964F5C8DF801F
E94295AD85BD9E1C18E6327977260A871E921C0745CA06A263E335E344686E7D
D6FE3ADB4EE0A7E462F3C00873C3E95D183CCEC71C0E5DC1D2FB310B28FC3611
67C23DE336C374F72368F4973052B48E39969305791C986E6EE35D0350571860
3A8ED849712CF21AEF444BA390644E8646CCA16559BA4642A5800827A0DDC453
7CA0818BC47DF6348A5209A2F0A10CA39840CE6346E89CA0E842BE8692DEF25C
4623A5A0E0B98708B9492E9F564324BB3872D6B953CA59E9F393C477E2AB85EC
C557D333E88C111CF995FB79D9432DC94C2BDB3BFEE13C0D7D1BB920DAFA6158
8548447AFC65CD5515D5021E0ED7D213B0C08C35BB424AA91885CA023D7AF767
B83E619B15DFEF5588D2F0564296E14B5A6ACE03751E1016105C51BE76EA5ADB
4167BAED2A8899031FD7BA05C410ADA25ADD94A787EED1A7AE133B0568B1DBA5
44B41BE013782CFCA3D81E8E8210DD506ADFCE7DC7E792EFEF438221164A7D1B
5E7089F476240C5F94988F081943F24DBF7CC3D1E58CB89E1C0C1624682CC3D8
C95815ECC9183A4B3E353C7F920B7E64086E01672DAA7C8A81319BAA03C1FBB7
8E5E84CC5BAE0E107754794C755B7AF00953504094E1A9DF357D51B578259613
8D26F0BA26AAC459BBEEB90BCC98B865EDD26AA4DF533D6624EDAC762C446B6F
CF9F86DD2D8989D4655775E662B93BF51805EE3CBA0AE2293D95F166E80973CC
82C53042D0249C598B0821E9E7F218BA6114EEC86C158F277934F2651490B723
7F0D0288560DA5BEBAFDDF243048E590871AD18B3B220EC56549004DF122AA03
BAAD6971D790BC644369FDBEE74A324083CFA9496C2A333774F06E35299242BC
F4B26578907CC5AD1893613F2B8622CFBB7B55810162EEBFAAEAB2A6D69CB72B
D7859C73843E665125FF450631F32E64F13A6207F368103C7A7318DBAF2560D0
F1CDD83C3E48CB30C62AF1E0896E1962C655D9ED98E1BB38477C1C60ECDB6B95
067D3A638AD43EE886338F7AD2D2A574CE6FD2E21F6FCB4220EFEC85ABF8272A
82081CE70E4390A74EC717F1DDD168F4A4A080A79EE2ECE0F98A96871DA4B52F
78441601AF47763C2219F5A167604C32F478D498835EF3A6167936994F7C7139
3019FF43C97E7978D3CDA641C1E391FEA572D308E759F28DDE2B40B5BC207A4B
C5EB6A93EEE26782016F8B6534420BE4D790A2E1A65B6CDBE9468152230384FD
14E9AE84418A44F94E6825DD7D77D0BB5486DE26A692B3DA96C81FA4440C5D44
8E7F3CAA9B8DF38F87E09C4D78841F629F78F4E7CC8580CC44E59E5D9AE8B2DE
C0682F793AE7AEC12A8AE688636197E8A08FEB70EFDB6203681A60223B9B0D39
2DA656E5E99B82130D4BE38D7AFE18568DD30B0CC3C73C1E2914ACE11A65334D
A9F18135E7B86157122CD221C33C62012FFB16D2D2F3473A53BE3E7B9FD4303F
66ADF0B07155C7B9B002EA68C6AC7247EB3CE7D2670A60138049DAA964F86A05
22983EDA7242E6BEEB90DF61C937399B2CE1061DF1E551CEED4A80D86C2D4649
C9FF9A1F93E96773CD392478D5B70D5336A03A274E0A6EF44BE8CB2274324142
706BC2E340DC944339D647961FD7BF29944503B4AFCDC69A706AA6B0F6AB2CB5
D220A96ACC1EE5E7826F6F75F044224E5260D581AE761AD0C752A06AA03FD935
FAD65C9EDD4E5505396E331D45DE88F0D1A4303D766ABE0702C17E2A7F53C0EA
96A4DEC5A6B6186F5DBAAB05DD78E38AFE630465BEF0EC66ABA9C1C9232214A9
795D105C33CF069F6BE20B179F4CC9F484AB63ED25C1212C457DF62CA0D56E20
608572216F2D4C09010B03A8AA6D287C8F514BEEDC1C912552CC2489858BF4D3
084882CE4F4B6FB9EE27C0168671E6DA154018ABEAD013C88E1D3EC918371251
63D95BA0FE20212C20AD3F4DB614EE36B488A3F55D94C1EDFCA8E68E54A1EED4
7DD168DCCF07C3DDB5E2B499DB5635C5C5056A7438120DB4839427D07F96AB8E
F842E285243E40259F6DF029E27779CCF3D3BD7206B2C341045A5A4AABACC2A5
91C6830FE05ACDCFDE99046F16F2AC183426ACA4A89FE5F09B7EB2F811BB5FB5
AF073BDA2886070B2327D582DCBA66B47E8948C3BE05E837BE4B81402A583403
74FF9E938F0E9DC3B1CB81B93DFD4070F9EBAED40BA570DE8F9A5C2C0A097311
22A6065139A6580E332473E9410D9F4C734794F79E41D0D437CEC7381919DF6F
A24B170E2BC97A6396A4E3AC3D844AD6E2B8FCE1C6AE97DFC5319F49130C3D6F
AF2541EB2384D5D4CCBEB976846EF8C2165DBF706112BDDDEC9A57D157F5996D
95229FD5C71B885D16B177BAB06B9DF5740A45C2A005778EE879193290419C0A
A4A339029E37E685B8A05B111DDF94AC19B1D85C8E6026E57E3D3B373C08557A
F96E6FE3916695ADFC1F0BF5D558565F42A71C61ACFEFC9026424397F0646642
7EDAA05794BCCD164A645860B57EAD53CB6899B18C6E9496EA4DAB0A0C272639
DEBC4FCBA94B3BF123F7771F602E7667C8F56E12429669F2219C7D8E294BE07B
71E88EA62F5616CAAB7C0198E6FF12A348E36B306FE2684A401399431B6A84CF
B46EE4BAA0F4099E65E9AF3B70274EDD6B6524F4FA38C23F9CD5273EEDC8C6C3
E7312B6E0497C05AD3F3C246638F01387CC11DBCBD287ACF54D8E24759F51415
35ED64132EF4158F54AB9F4D567482B3057880490F805822F71E7E2C52F7BC38
8B1F803AC3731064B90E5E97AA3351D17E73DC2FE526CD6C91158636E395867D
C1150FD3BD12493FFFB813AF0D08C8ED0B7418A2CF90BD5B783364358605D075
5DEA95A9299C0654EFB28E2FE8A41358A0DD124D0314A27558E42ED5F2D74BB7
056DE04D2CF13B9B804A3CBBA29BC155A3F18B8B48283194C33CE8291677E1EF
0721138F8E0409D49BB99F217607586D2DF00C29A25536E21924B4CF6702CF85
C02DFBFD2AA4DE3DBED1D2C02E21052A8D10F96629D0D18154923638FE0C48BD
E2DEAF11663E20717EA77A5453686AAA39D6FF7919AF09B1AD956FDBF734F49E
262F3076F62E77BD45122B55A5913902D9F91C4246FC235BA9C0FA4A96994291
830638949BED423387DA2D455A3C9122484EFF27F5367D1D3DD27D207D973815
965E1CFF36F43C653ED406F65348671D9FFAF55BA3FC266D438AF473181B7801
164EA3F04FEC870743195B3F467DE36B3719BAD9BF15A18637A314C887D46673
445BA3C212749B0A33136FEE9FE2C9A13D62E7ACC96378D257FBE0EB06AD4D4E
D41976AB92AC720DFD33B0677062C32E6F5C992A0324FD26E984B5341A58C190
D20EC3F1144697D514D9157340A6C9F82E62AD8CFDEE59F6FF86C6250CE33D6B
BB82DDB4F65BEFC6F6D0E4044F7BF307CC346E2FFD191846E3CA288C6F91CB71
5FDE855FEC5E38816CC635C470BF15263A10A409F0BC4877F7E6D4C223E3564E
E7BB5B320AAA5AAF4F32528F7413BFB97C70FF5E6843E1FE501472129BC9758D
7531BE576C75840CBC4CD3E6D9E5FF52559B68DE6E7827128BB2ED1BAD43F36E
A0CB68C1A147A7093EB02062AC5492DB7EEE08B1BDB187E15339A66269E459BC
67495937B4317AF66A498923322B087ECF47B601C26E253D223A784DB2D204FD
0668BD403A73723848018B7C86B627B9AE0BD9038F567CD5F670CAFC5C4D86FC
ECA211B713ACF8C1370191161CBB6C2592E8B9DBF3471133F2D9A60F15D72F9C
5E5539D59A6A7E124D9A38A6FF6EB7C71990716F88E1888295584F17D49144B2
B57252D7D87CFB7BE009E0E1AF68C57E2041CB837A1F9DA290FC07240D616876
CBA29ED23952F977F27ED97503F6C6CB48DA6611E0ED9D90FA865D099740C6CE
8A5DDBB1D6550B208321C365A5104F9ABD66A9238B8A2106AA74CAC58D1163F1
DC4A62013C0F6DD8A3E8E1A6CC6E553746D570A744863FD8EA705890890AC5BC
2F0A068C740572F045B32289A2AE66CC44A1C13FB8BBD4E1834995731D19B47E
7C2FE360AE79DACB95856B01EE39EB3C7C9EAEB3D47348C47D928BC883B8E760
6724D80DABC4D736411942BBA8CF08157F21D63C18924282193C5C8E44E09048
FDCB8DB2E01C8A496FEE2CFC19A3A0EACA508237C8BD988ED6D33D01EB548B14
61A546886AACDAFB7C8CA69056B1F428D72541D61C46A485BD3D5BE61D1F24C0
00A43EB45D220FF405A377AA35417890DF8420A58999BF4BA49D2C1ED6E70F9A
2F663695FD7A97D4B9AF0E06F0239428A7898B90C78D93050C278D53119AE7B8
18CECA59D920C7D54FDF5B36C413CC85A5601CAA071E6D2CE93C3504A13B83EB
BE5A9358EC4B64CB07D1DE16CA56A80B5EE2DFE87C59C423CE736EB0F706AE8B
7FCD90F2718A9A4EF90B9B97676B39C562139C4B189830EE8D144944F8182BA6
BCEB7FB0C77B7F2DC8798C496CC1551BF6E9F63EB4A237A7A84048F367E91359
0F1E73F926B5540B21773988E6D427F9C1D14E06F19263E2856AE90A668C69AD
03A43D22E56E1A99F1CFBFC2A5FE73BCD64C02AD070034F95EDF54B86B668EBE
3D8647541EC97FC7F1C9F0731012A7F9486C32A7F6EBD3942A962F76CB3F8462
735C6A872707B51EA42C0BCB4B3FE57C52DC3E2F97F77B56EEFF6BC29CEE91D8
8E3DF4DF0C0BDE34EF569CB48593FA4863874B9D15E2BB0EB212843D34388ED6
6F06F37D024E512FF92D1E8FB410BC6E5DD953734567BD9EFB235C19B89D6C7A
934028CA06BB858EDCFC584648163AE4E9F76FBAFF3A7E07E1DB9CED35261483
BD6AAC1B21CDF6383DD5578C8524E6215004D7BC8094EC4DE95101C62F903150
BF2E376C8BFC70DECA19752CF2FD734285FCF05BA964230AC3F13D795E618CDA
C0AB38BC4E4173B49EB0E9BC08CD5C73ADBDA46E8698A03B8080F94FC602937B
1092FC15091C9496FFC9E8C0B884738A1D036AB7AA09D58A24508C7A82669A97
1C7CCAA61196D519A0CC2D5BFAFAA178A2ED146B55F48E27A2C99E101D9E5212
48ED1D4CF9B01592A18DB176AB1F04640246C2606267A8F44CCBF1B7B2D85109
FFCDFD3FCD3979A467F0DCB982C3B1D66B616F563A96065884E2981351C26A05
E1B766F6B41E595F9067E0DFE1DB7A8546571A9936EC21B1258173DCDDDE15B6
DEF684F9DB98E044E10686510E1442CC05AD5FF267457462A561AE28289468B0
FCADC298C3EFA0C2A0BC5A07D9F0463564D4CB9F28670C055CFD727E42486069
819A3327F4EF0BB64727B99E08E7D8098F25EBE3A1893D19811CE6A4AA6C03AB
564001350236E0B7E8B31CDED8CC5690B6E7AA86FED94FBDE705E100FD19E3D5
19ADF0076465FA3F561C66BB6F1EB8262BB5D77C31A42F9B5351B387A71DBEC1
C964BD16E447152E8D89740DC8B737D1A6D9C3924D96DAE9ACA14E4EB04D6C3B
76E935B25AC48654A4883B7AD0EEC6D4F5304D4EA472D8B635EC764A83C31BE2
40717277B0BEC8C2C1DE36BEA06A8B63ED5D3797CB4173F2D1C0743C2AB5D41A
1083CA8D73A2D8676818FBBE0BEB7F718B1DA31E8C63C96078D1F370405B4371
15430C7186D1749BAB22C4DE9D314213C4687914769FB4F37AB97D790C56305E
B097F16EF5F647F3DF676265DC728DE6E81D35D8479B30FB8EF5AA67A6852848
09CAEDC29784F17FAD4BCBD9DE11D28A629C8FE4A45C89D156D479DCACAEC01E
303CC0FB8714B66565916344FB339B9CD1A0E65B0D568AA48617D9138D6DA8D4
1068484C6C9E873EEE840562D85438D89F3D730EA55B20E48E31FEE6F326BD1F
F4F0B4845A167B17320E8FA33CBB9C41970E58C7C285B1C11A39A5F66D2350B2
C406FD2DEFE019F2CF6D9E3F2E4364EEE4EF3A9F1C0339B80DC0C170E1DC47D6
953364C2913D05262D8210E28C819ABA5ED2646D08E3FCB42ACC51F3A1235E9D
E9C6CE9F8B89791FCF5504403316FABDC8ECE38FC06C4C19E0E3085786082F2C
4A72EB74F6429376371990B8B3E318599924AC5B7F28062BA18CB2ED4F45E470
13259AEC215657E97731AF5BE1684E837DAB28C227ADDBE8A6464E02C184B2D0
741128C675DEB746182F64E411E52B31E1189DFB85DDAD11F25221F21FAA122A
E692D330C6045F9CC1B8DC0CADE6AF694945B6F51262CF0791F76DA9A951634C
79BF6CD2EADDB629D8C66498D9B36E0AEC2D7D6C7396ADF6B21008DDF3BAB8F4
C516C50C4797F13999B3CC83F641A36E3FDF84335F65E04C7D4AB00CB0EA0D26
AEAB4F22B3608972FAB32A463761779B9159385F146EC1F61D472405DC218E64
D5AB5D752D318EA14812B6C79055974D007496FF165F5A0B3D8948C089F0D702
91B274CC1BFBA60D3A5E35684C09D7822B4F086AA89E8D47D9775E7173FC019F
25397DBD99AA82EE4E3A3C51B0594AEAB29FECD2A82DD29ED9F23879E537AFFF
3487BE74E952A2712D873E90FBF834DC3FB026786ABE9120471FC5AF693063C3
C6A93F8EF5AAF816B2CCDFCAB4251CA488C2F21B225FA345D5171137078F0B40
DA9A15597815B52937E92DDEEF81589BC0B887F32DDB4049CFE5723EA317A5C1
3A6801A8D444C47FB63FA11100205FF893E791B8C9F71E7E25BDFBBEA8F8D08F
4B4DF25722679FBB67B148519D48B7A90F9205FA385816D54A536B345B8B70BE
C65FD9B35616FA713D1DCCFDB0C0B08DC27EBE3EF3DF78451342D31723F3083A
D8CB26DB40122230B7EC730BB5F5C8B8DBCE262FC3421361429C2B188049CD69
7F159D058EC8802C1EA12C07E1D78EBDB49DE8376D0DC9217EB29ABDAFEB51E2
92B35EEE9C0902D6BB81DCD54FF4C98F4096DC82AC8668B7FB57CF35E7EB35C5
693C911E53AF9F25D8E2FF479BD1408E357CE365F8B786FF9188D90BD63F9255
A71C4E4372E53CF9185221783775A49D2B1B1ED61DF9A9023492F02DB3C9B6A3
987922E0CFAC1D88A895C5146BF217A00FCB6F9B9BBEBC7F63F7249614C319CD
FF8807C3EF550979C7AD55CBE9FE039E693CF9DC4B1D55736FC45DBC8B4F2100
3F4D9E6EBFCD69A4FB41D149DA37822D07EE576544D577980AFB4B145A969E01
28B228794CDDE9017F2A1376AF4EF0616CA88BBC95369F89029EC3DA4E6EB81C
C4A4AFB9066D632C3727C119D0D3020B9207E66A1BA67A6261B7948F52B94F2E
C8746F24A1C7773849D70437225E8EA1FC5C3197E1915383225FC91A6C54949A
1FE3A9CAA0EB1694106A0328065C9F88E95D043BC8864DEEFAC84FDD960FC23B
440558484E8CC1BC4AB388BF482B90D3FC7192B6A32175C889EDEDE81F81D600
6ACE7A28D33E08637637389041DE85A87B2418D1A35CD2F23AF952E7917D0F8F
FACBE9BE1D3D87055FC6CFC7813E73D627FD5FAB7589255FDA6FCDDE837F67E2
C8142AED3AF51D44909938B351A5279E30341B222F5D344D42CBB2B7A489B8B2
742F0F9BADD4243E836CC614A4FD23ADF2AE9CA5CBCE90C706775F601AAD5E3C
FD7C0B81659CFF174D6166B814D2474F355ADD83C03B9D548F8786BB8FDB89DD
5366A3DBBA6C83BD50A9CC1B19320802CA929433E1F25000EAAD6438D3688BF8
747E0E613F193EAEDDD378A48A465AB6570AFED812099A88BA52AA909DA67AA3
E2858AA2E31B41E116143E91D1BF44BB36155B334F05B7E081F70C47B4A89518
81894CEEECCEAC5FECAEF16D3B0C18578D4DBE026A6B29F0D01B2935E6A0CEEE
A9D3BD9AC7873B46B9CF05DB388C0A67260CB7D7205A629B400BDA4A764E984F
29857E4E14FFA18945A06815A82FCFDCF27CE1807BAFF49AFFF926284AD10CE7
8F6E44EB90B354E02D7930E474E005FF8783BCE319634585A9AFBEEB5DB77D35
E336A3182AF4BF429BD20683C98BBB0433B618AE8670C7860B180D6272A944E2
45114AFB7E9E3E3A44607F4095241569BDF7BBDA0F4B0DADD4E1F548FC82AB9F
86584B4C9B317DD26107315E43EB4EEF90286292262CEAEEB2371855CD4D571F
41EFC18DC98E0E3F27810A5BE8B6AF85D3F27C25F8E7A0C6539C3B3BD0BA01F4
D4559B346BAEFC4CD633C25A320AA88CEF0B3C21B362176D99052DED942549F4
E82B94D81A648046DB52899395C06AFA433D59DA12EA7FBB3F7E72AAC7CBB753
8AB46649401C9D2E7E52EC0F1E015F05A3B5FFE6A074CE59116B632885371FF4
8804505E2E54C4FC06CF3F4690331500A2B6292B314BC1AE312EDDB54FFFC12D
5D1B1514AE7FEF2F7FF4F0629D4AC1FD570D5F7960AF5534403F1A01CF3D3F56
8FBF72A93F39BFA6EE63E79D965EC4F71CC01BC019A65CAAB27B0211F400A6A6
58D254C4D4426E1162B87DA1106838D1B4BA9CCA5CA5180CE75D6FD4FFDF5BB5
196E82040174BBD1DCD309555798A4E1524C39B2B54EA64F166CEFFDBC0108C3
CC44DF369994B850496731067A7B0E71D8BE7B2BE7B48345307AED7FC575A215
6C8B51E9E2444432B46A369BB38AF2E662F57222746365C17B124C22B899300D
96657AA42E5A8BD4AE02E5474D3559A82B38DED4D5CC076AC0D5F8227371CCFD
299073FA0895A808BF357DF07CB474085FDACF9BC236B131D83957BBFC3FA3EE
3EF7C1D5A0CA04D97F3DBBA87F8D2067D032CB5A246E4CAF82ADDEBD7DDA67BF
10C3AB55D2C1EACA21FF68FD3CC75924A66084726AF241EF111355EDCF32BB80
F51A99FA2C4C1C8AADE64BCCDB18760328C8DADB47FC3CF9FEA572A2293F8F44
F5FF5CE585E167EFF92717D697B498162EA5A6C22DACD7879B372C56AC3E7862
C69BE6AA8AB16498D1C071161347B129F1024F4FAA958B11ED879178CC27E78A
05766CE564728C865EF848C07F5A2EFBE0A974387D0E2C326DFB704D38369691
6AE283ADD5AE000FDD3DE907AEA2B755261905A10D2F6341CC1B1B5FE316D936
65EB798004C165AD70DEF3350C6EA702432ADD37BC39B6DC03985ED1A04734BE
9E3DE6811837E537E693B0699814D4439B51B34A9BBE909224AFD261C434D1D4
CFEE9CEEEE7DAA184FC19BA7AE446A36AA4990EACF36C4FD0A10242E4525A519
2C888DD5B70DDCF3B80CD8FE98819166938111EF97F5670308376B4DB4C44044
CEB70EB0241DFB2D9570CFC2217B4449DDC41A26F5D71772876245927C767F48
9CB1B5332F5D407F61D4E30B0C297102F5DC29A736DA2C182879D295FB4387E5
40DF644F023FEB6ECACEB53F9B296F3B9C4C4B7E79F6304763BBA1AA81F9D7E4
6374F9CFA07612C0F939B338F906A69C879F980BA6AD5BAFE483E8C74E95FA50
78B55FC14783D963F34FCDDB3113D3C94BB51D7760D185F7237644B788CB5B7C
59DB7C491BCB13F943E9A45A490843A001264FBB574C0E87EDB7603D3CBA6969
0FF6CA2FB9AE78F8F0F3E3610E18AF606080EC3365308CBA6395F7BD47771EFE
5278C92AB13223007DD87CDF2AEE5C501248BB49F92131B5C5EADF3FB74D2D30
2C5DAE08113969D757ADB0601FDE2D3B4E97345EAFDF07DE378CFC0CBF362A3A
D1F83A14BA096981228DCA5D3A8C977BE852BDBD0B1B970F0E71117ADD6533B0
1870E44FE691823FC76BB01484552DC7DE4FEE5B54DA06C9CA31186679677B37
4AE6BA63731777660ECACAA6E74D24A70DE02A68F76B00FD670A599D636581AB
3A46FBA6D08728DA3D95AD567B1CB6643E6EA4BE6E222313B0E8887640BAC1EB
FC6AE2B123CF34CFA12C26E9C92BA5E4E3A3E78B5CF29C3F7B54475676A8A179
4570BB4AB064152D6D3D299B3170D742B5CB5556776E05E4F753E0FC1B96D2F2
2CBCBE1F7ED9831F5E318D386DB2936A36D1F2A2B3E7B42FC68618A158ED232D
3F24C48304CFA3E0A728280584DDBAFBE4190C74BCF0778671C567000A5D6394
AC20956BAA1152D41B253512E9F57E6BF5A67C92C4B55B759E57D73BBA4A4142
286A25A4AF98B354CE2BAE4C25FD7A15BE1F1EE9B59B3D6FBCC37651E70AA912
84EA7313E80B493E29A31888CDB47ABA5601A860B4EAB1092B5B512EA47DC94F
53597A33E1972A67BB6C5965B8A035613F59A2DB6CF58CF84ADC582C48381B57
F1E1910F59D20A29F25ADB793B1ABEBA67C18E5B9F207011B13EDF8615A05BA0
3B8CEE0E9FB3E949C32C312C7FE7A7ADCB8A5B8BF66F953CBD62B9B57E367E03
D442D254A728FBFF0019145F7299054AED0D694EA31827E808DDF4558DF0BA43
167C18C8FF11DCFD861551644D986EC55A206319694BBAFCA63C64BAAE789393
7C141E56BFF208EFA2394B52D70019FE3E1AD38383A707DDC165A93C9A417D89
8C7C582A06054D9E5FD9C120B05FF71FB84F47D1320F5C939A7D9A8CAA075774
F1B9CFD8903B10E1523150BD2816B32038632C334DFEC433E1600D4118B5ABB8
42BF42593FCD04B8EDE38E8D44CF5484C37E8A987A69FE441699D1E747A8E38B
473D45CEC8621839800D0FE9D8DE125F0B3F649A1DB34314A39CB774BD1AF90E
891C4527390E8E663FB3C06E206D2D85E43D96FF2D580A14C42D9CACF6C88C76
D6A9CA35FB5A908D346D2526EFBC36C8BE57C5E4A490440FA1B329B5AC64F96B
9D2AFBD41B939FFC526C8128DD9E51D1CE835C27067603307FB4DA45575F3209
FFD440CAAF17FD6E079A11FF839F5FEFC1F3F673B7F125A98144B1E764E2CAE2
DDB782B1CF74
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (documentation.dvi)
@start /Fa 134[59 1[81 59 62 44 44 46 1[62 56 62 93 31
59 34 31 62 56 34 51 62 50 62 54 11[86 1[62 2[77 84 1[106
67 2[42 88 1[70 1[86 81 80 85 7[56 56 56 56 56 56 56
56 56 2[31 37 6[87 26[65 11[{}49 99.6264 /CMBX12 rf /Fb
131[91 2[48 48 66 48 51 35 36 36 48 51 45 51 76 25 48
1[25 51 45 28 40 51 40 51 45 4[45 7[66 3[62 71 9[62 3[68
11[45 2[45 45 45 1[25 30 25 2[35 35 5[45 19[76 1[51 12[{}43
90.9091 /CMR10 rf /Fc 136[97 71 75 52 53 55 71 2[75 112
3[37 1[67 1[61 3[65 11[103 2[100 2[101 27[67 67 67 49[{}19
119.552 /CMBX12 rf /Fd 138[54 38 1[38 1[54 49 54 1[27
1[30 27 1[49 1[43 54 1[54 15[72 7[50 2[77 5[73 8[49 4[49
49 49 49 1[27 1[27 2[38 38 40[{}26 99.6264 /CMR12 rf
/Fe 136[96 70 73 51 52 51 2[66 73 111 1[70 1[36 1[66
40 58 1[58 1[66 16[90 5[68 2[104 86 1[101 96 13[66 2[66
6[103 43[{}25 143.462 /CMR17 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 803 951 a Fe(G52CFJ)43
b(C++)h(for)e(Ja)l(v)-7 b(a)42 b(Programmers)1076 1173
y(Coursew)l(ork)g(Do)t(cumen)l(tation)1300 1501 y Fd(Rob)s(ert)32
b(J.)h(Golding)f(\(rjg08u\))1574 1780 y(April)h(30,)f(2011)382
2249 y Fc(1)135 b(Ov)l(erview)382 2526 y Fb(The)32 b(game)i(is)f(in)m
(tended)f(to)h(b)s(e)g(a)g(clone)g(of)g(the)g(p)s(opular)e(P)m(acman)j
(game.)49 b(Though)382 2663 y(it)31 b(do)s(es)f(not)g(implemen)m(t)h
(all)g(of)g(the)f(functionalit)m(y)i(of)e(the)h(o\016cial)g(game,)h
(all)f(of)f(the)382 2800 y(coursew)m(ork)h(requiremen)m(ts)f(are)h
(ful\014lled.)382 3170 y Fc(2)135 b(Usage)382 3447 y
Fb(The)26 b(game)h(starts)f(with)g(an)g(initialisation)j(screen,)e
(requiring)f(the)h(user)e(to)i(press)e(the)382 3584 y(space)32
b(bar)f(to)i(start.)45 b(Once)32 b(the)g(game)g(is)g(running,)f
(pressing)g(space)h(again)h(pauses.)382 3721 y(Pressing)d(the)h(escap)s
(e)f(k)m(ey)i(at)f(an)m(y)f(p)s(oin)m(t)h(exits)g(the)f(game.)382
3909 y(The)i(aim)h(of)g(the)f(game)i(is)f(to)g(collect)i(all)e(of)g
(the)g(\\p)s(ellets")h(without)e(b)s(eing)h(caugh)m(t)382
4046 y(b)m(y)c(the)g(enemies.)40 b(The)29 b(larger)g(p)s(ellets)h(are)f
(\\p)s(o)m(w)m(er-ups")g(whic)m(h)g(w)m(ork)g(in)f(the)h(same)382
4183 y(w)m(a)m(y)41 b(as)f(the)g(original)h(P)m(acman)f(game|allo)m
(wing)j(the)d(pla)m(y)m(er)h(to)f(catc)m(h)i(enemies,)382
4320 y(sending)30 b(them)g(bac)m(k)h(to)g(their)g(original)g(starting)g
(lo)s(cation.)382 4508 y(Once)i(all)i(the)e(p)s(ellets)h(ha)m(v)m(e)h
(b)s(een)e(collected,)k(the)d(lev)m(el)h(is)e(complete.)52
b(Eac)m(h)34 b(p)s(ellet)382 4645 y(scores)42 b(the)g(pla)m(y)m(er)h
(10)g(p)s(oin)m(ts.)75 b(A)42 b(p)s(o)m(w)m(er-up)g(p)s(ellet)g(is)g(w)
m(orth)g(50)h(p)s(oin)m(ts.)75 b(The)382 4782 y(p)s(o)m(w)m(er-up)32
b(mo)s(de)h(lasts)h(for)e(5)i(seconds,)g(and)e(whilst)h(in)g(this)g(mo)
s(de)f(normal)h(p)s(ellets)382 4919 y(score)e(double)f(the)g(normal)h
(amoun)m(t)g(\(20)g(p)s(oin)m(ts\).)382 5107 y(T)-8 b(o)29
b(mo)m(v)m(e)i(the)e(pla)m(y)m(er,)i(use)e(the)g(arro)m(w)g(k)m(eys)h
(on)f(the)g(k)m(eyb)s(oard.)40 b(Once)29 b(mo)m(ving,)h(the)382
5244 y(pla)m(y)m(er)37 b(will)f(con)m(tin)m(ue)h(to)f(mo)m(v)m(e)i(in)d
(the)h(same)g(direction)h(un)m(til)f(a)g(w)m(all)h(is)f(reac)m(hed,)382
5381 y(when)28 b(it)i(will)f(stop.)41 b(Pressing)29 b(a)g(k)m(ey)h(to)g
(mo)m(v)m(e)h(in)e(a)g(direction)h(whic)m(h)f(is)g(imp)s(ossible)p
0 TeXcolorgray 1854 5652 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 382 548 a Fb(due)35 b(to)i(a)g(w)m(all)g(will)f(dela)m(y)h
(that)g(action)g(un)m(til)g(it)f(is)g(next)g(a)m(v)-5
b(ailable,)41 b(in)35 b(m)m(uc)m(h)h(the)382 685 y(same)31
b(w)m(a)m(y)g(as)g(the)f(original)i(P)m(acman)f(game.)382
1054 y Fc(3)135 b(Requiremen)l(ts)382 1336 y Fa(3.1)112
b(Dra)m(w)38 b(an)g(Appropriate)f(Bac)m(kground)382 1587
y(3.2)112 b(Ha)m(v)m(e)38 b(Mo)m(ving)g(Ob)6 b(jects)382
1837 y(3.3)112 b(Ha)m(v)m(e)38 b(In)m(teraction)f(Bet)m(w)m(een)g(the)g
(Ob)6 b(jects)38 b(&)g(Bac)m(kground)382 2088 y(3.4)112
b(Pro)m(vide)38 b(User)f(In)m(teraction)382 2338 y(3.5)112
b(Pro)m(vide)38 b(AI-Con)m(trolled)f(Ob)6 b(jects)382
2589 y(3.6)112 b(Load)39 b(Data)f(F)-9 b(rom)37 b(Files)382
2839 y(3.7)112 b(Sa)m(v)m(e)38 b(and)h(Load)f(Information)382
3090 y(3.8)112 b(Displa)m(y)39 b(Status)e(Information)i(on)e(the)h
(Screen)382 3341 y(3.9)112 b(Supp)s(ort)38 b(Di\013eren)m(t)g(States)p
0 TeXcolorgray 1854 5652 a Fb(2)p 0 TeXcolorgray eop
end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
